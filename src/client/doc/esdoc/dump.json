[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "lib/connection/AjaxConnection.js",
    "content": "import Connection from './Connection'\nimport { ajaxPut } from '../utils'\n\n/**\n * Robot connection implemented with repetitive AJAX PUTs to the robot\n * REST API. In practice, this method is limited to 10-15Hz, but is a lowest\n * common denominator supported by nearly all devices.\n *\n * This class is used by the framework and is configured based on options set\n * in the user interface. Direct use by your code is generally not needed.\n */\nexport default class AjaxConnection extends Connection {\n  /**\n   * Constructor.\n   *\n   * Create an AJAX connection. This connection will continuously poll the\n   * robot REST interface at `http://hostname/control` to send control packets.\n   *\n   * @override\n   * @param {number} [timeoutMillis=500] connection timeout in milliseconds\n   */\n  constructor (timeoutMillis) {\n    super()\n    /**\n     * Connection timeout in milliseconds\n     * @type {number}\n     */\n    this.timeoutMillis = timeoutMillis || 500\n    /** @private */\n    this.timerId = null\n  }\n\n  /**\n   *  Poll the robot in a continuous loop.\n   *  @private\n   */\n  poll () {\n    const pollStartMs = new Date().getTime()\n    ajaxPut('/control?body=' + this.dataPacket, this.dataPacket, this.timeoutMillis, (err, res) => {\n      // was the loop terminated? //\n      this.lastError = err\n      if (this.state === Connection.DISCONNECTED) {\n        this.setResponseData(null)\n        return\n      }\n\n      // handle response //\n      if (!this.lastError) {\n        if (this.state !== Connection.CONNECTED) {\n          this.setState(Connection.CONNECTED)\n        }\n        this.pingTimeMs = new Date().getTime() - pollStartMs\n        this.setResponseData(res.data)\n      } else {\n        this.setState(Connection.ERROR)\n        this.setResponseData(null)\n      }\n\n      // poll again //\n      const pollMs = (this.state === Connection.ERROR) ? 1000 : 50 // back off if error //\n      this.timerId = setTimeout(this.poll.bind(this), pollMs)\n    })\n  }\n\n  /**\n   *  Start connection to the robot.\n   *  @override\n   */\n  start () {\n    this.setState(Connection.CONNECTING)\n    super.start()\n    this.poll()\n  }\n\n  /**\n   *  Stop connection to the robot.\n   *  @override\n   */\n  stop () {\n    if (this.timerId) clearTimeout(this.timerId)\n    super.stop()\n    this.setState(Connection.DISCONNECTED)\n    this.setResponseData(null)\n  }\n}\n",
    "static": true,
    "longname": "lib/connection/AjaxConnection.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "AjaxConnection",
    "memberof": "lib/connection/AjaxConnection.js",
    "static": true,
    "longname": "lib/connection/AjaxConnection.js~AjaxConnection",
    "access": null,
    "export": true,
    "importPath": "combatbot-bot-client/lib/connection/AjaxConnection.js",
    "importStyle": "AjaxConnection",
    "description": "Robot connection implemented with repetitive AJAX PUTs to the robot\nREST API. In practice, this method is limited to 10-15Hz, but is a lowest\ncommon denominator supported by nearly all devices.\n\nThis class is used by the framework and is configured based on options set\nin the user interface. Direct use by your code is generally not needed.",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "lib/connection/Connection.js~Connection"
    ]
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/connection/AjaxConnection.js~AjaxConnection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/connection/AjaxConnection.js~AjaxConnection#constructor",
    "access": null,
    "description": "Constructor.\n\nCreate an AJAX connection. This connection will continuously poll the\nrobot REST interface at `http://hostname/control` to send control packets.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "500",
        "defaultRaw": 500,
        "name": "timeoutMillis",
        "description": "connection timeout in milliseconds"
      }
    ],
    "override": true
  },
  {
    "__docId__": 3,
    "kind": "member",
    "name": "timeoutMillis",
    "memberof": "lib/connection/AjaxConnection.js~AjaxConnection",
    "static": false,
    "longname": "lib/connection/AjaxConnection.js~AjaxConnection#timeoutMillis",
    "access": null,
    "description": "Connection timeout in milliseconds",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 4,
    "kind": "member",
    "name": "timerId",
    "memberof": "lib/connection/AjaxConnection.js~AjaxConnection",
    "static": false,
    "longname": "lib/connection/AjaxConnection.js~AjaxConnection#timerId",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "method",
    "name": "poll",
    "memberof": "lib/connection/AjaxConnection.js~AjaxConnection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/connection/AjaxConnection.js~AjaxConnection#poll",
    "access": "private",
    "description": " Poll the robot in a continuous loop.",
    "lineNumber": 37,
    "params": []
  },
  {
    "__docId__": 6,
    "kind": "member",
    "name": "lastError",
    "memberof": "lib/connection/AjaxConnection.js~AjaxConnection",
    "static": false,
    "longname": "lib/connection/AjaxConnection.js~AjaxConnection#lastError",
    "access": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "member",
    "name": "pingTimeMs",
    "memberof": "lib/connection/AjaxConnection.js~AjaxConnection",
    "static": false,
    "longname": "lib/connection/AjaxConnection.js~AjaxConnection#pingTimeMs",
    "access": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "member",
    "name": "timerId",
    "memberof": "lib/connection/AjaxConnection.js~AjaxConnection",
    "static": false,
    "longname": "lib/connection/AjaxConnection.js~AjaxConnection#timerId",
    "access": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "method",
    "name": "start",
    "memberof": "lib/connection/AjaxConnection.js~AjaxConnection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/connection/AjaxConnection.js~AjaxConnection#start",
    "access": null,
    "description": " Start connection to the robot.",
    "lineNumber": 69,
    "params": [],
    "override": true
  },
  {
    "__docId__": 10,
    "kind": "method",
    "name": "stop",
    "memberof": "lib/connection/AjaxConnection.js~AjaxConnection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/connection/AjaxConnection.js~AjaxConnection#stop",
    "access": null,
    "description": " Stop connection to the robot.",
    "lineNumber": 79,
    "params": [],
    "override": true
  },
  {
    "__docId__": 11,
    "kind": "file",
    "name": "lib/connection/Connection.js",
    "content": "/**\n * Base interface for connection to robot.\n *\n * Contains shared functionality between the AJAX and WebSocket connection types.\n *\n * Implements a buffered asynchronous connection. External sources should\n * call setRobotData() whenever new data is available. It will be sent to the robot\n * at the fasted rate the connection will allow.\n *\n * @example <caption>Connection States</caption>\n * Connection.CONNECTED = 'Connected'\n * Connection.CONNECTING = 'Connecting'\n * Connection.DISCONNECTED = 'Disconnected'\n * Connection.ERROR = 'Error'\n */\nexport default class Connection {\n  /**\n   * Constructor.\n   *\n   * @abstract\n   * @protected\n   */\n  constructor () {\n    /**\n     * The current state of the connection\n     * @type {string}\n     */\n    this.state = Connection.DISCONNECTED\n    /**\n     * Is connection enabled.\n     * @type {boolean}\n     */\n    this.enabled = false\n    /**\n     * The last error recorded if the state is ERROR\n     * @type {Error}\n     */\n    this.lastError = null\n    /**\n     * The round-trip time for the last packet received\n     * @type {number}\n     */\n    this.pingTimeMs = null\n    /**\n     * StateChange event, raised whenever the connection state changes.\n     *\n     * @emits {StateChangeEvent} the state connection state has changed\n     * @type {function(newState: string, oldState: string)}\n     */\n    this.onstatechange = null\n    /**\n     * ResponseData event, raised when the connection has received new data\n     * from the robot. The data is a raw string as generated by the robot\n     * firmware.\n     *\n     * @emits {ResponseDataEvent} new data received\n     * @type {function(data: string)}\n     */\n    this.onresponsedata = null\n    /**\n     * @private\n     * @type {string}\n     */\n    this.responseData = null\n    /**\n     * @private\n     * @type {string}\n     */\n    this.dataPacket = null\n  }\n\n  /**\n   *  Start connection to the robot.\n   */\n  start () {\n    this.enabled = true\n  }\n\n  /**\n   *  Stop connection to the robot.\n   */\n  stop () {\n    this.enabled = false\n  }\n\n  /**\n   * Update the connection state and notify listeners if the state\n   * has changed.\n   *\n   * @private\n   * @param {string} newState - the new state\n   */\n  setState (newState) {\n    if (newState === this.state) return\n    const oldState = this.state\n    this.state = newState\n\n    // notify listener //\n    if (typeof this.onstatechange === 'function') {\n      this.onstatechange(newState, oldState)\n    }\n  }\n\n  /**\n   * Set the raw data packet to send to the robot. The actual connection\n   * operates asynchronously, so this method should be called as frequently\n   * as new data is available.\n   *\n   * If an object is passed, it will be converted to JSON.\n   *\n   * @protected\n   * @param {object|string} data the data packet to send\n   */\n  setRobotData (data) {\n    this.dataPacket = (typeof data === 'string') ? data : JSON.stringify(data)\n  }\n\n  /**\n   * Get the latest raw data packet received from the robot. This is set\n   * asynchronously by the connection.\n   *\n   * @protected\n   * @return {string} last robot data packet\n   */\n  getResponseData () {\n    return this.responseData\n  }\n\n  /**\n   * Called by connections to set the latest response data and update\n   * any listeners.\n   *\n   * @private\n   * @param {string} data the data packet received\n   */\n  setResponseData (data) {\n    this.responseData = data\n    if (!data) {\n      this.pingTimeMs = null\n    }\n    // notify listener //\n    if (typeof this.onresponsedata === 'function') {\n      this.onresponsedata(data)\n    }\n  }\n}\n// connection status constants //\nConnection.CONNECTED = 'Connected'\nConnection.CONNECTING = 'Connecting'\nConnection.DISCONNECTED = 'Disconnected'\nConnection.ERROR = 'Error'\n",
    "static": true,
    "longname": "lib/connection/Connection.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 12,
    "kind": "class",
    "name": "Connection",
    "memberof": "lib/connection/Connection.js",
    "static": true,
    "longname": "lib/connection/Connection.js~Connection",
    "access": null,
    "export": true,
    "importPath": "combatbot-bot-client/lib/connection/Connection.js",
    "importStyle": "Connection",
    "description": "Base interface for connection to robot.\n\nContains shared functionality between the AJAX and WebSocket connection types.\n\nImplements a buffered asynchronous connection. External sources should\ncall setRobotData() whenever new data is available. It will be sent to the robot\nat the fasted rate the connection will allow.",
    "examples": [
      "<caption>Connection States</caption>\nConnection.CONNECTED = 'Connected'\nConnection.CONNECTING = 'Connecting'\nConnection.DISCONNECTED = 'Disconnected'\nConnection.ERROR = 'Error'"
    ],
    "lineNumber": 16,
    "interface": false
  },
  {
    "__docId__": 13,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/connection/Connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/connection/Connection.js~Connection#constructor",
    "access": "protected",
    "description": "Constructor.",
    "lineNumber": 23,
    "params": [],
    "abstract": true
  },
  {
    "__docId__": 14,
    "kind": "member",
    "name": "state",
    "memberof": "lib/connection/Connection.js~Connection",
    "static": false,
    "longname": "lib/connection/Connection.js~Connection#state",
    "access": null,
    "description": "The current state of the connection",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 15,
    "kind": "member",
    "name": "enabled",
    "memberof": "lib/connection/Connection.js~Connection",
    "static": false,
    "longname": "lib/connection/Connection.js~Connection#enabled",
    "access": null,
    "description": "Is connection enabled.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 16,
    "kind": "member",
    "name": "lastError",
    "memberof": "lib/connection/Connection.js~Connection",
    "static": false,
    "longname": "lib/connection/Connection.js~Connection#lastError",
    "access": null,
    "description": "The last error recorded if the state is ERROR",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 17,
    "kind": "member",
    "name": "pingTimeMs",
    "memberof": "lib/connection/Connection.js~Connection",
    "static": false,
    "longname": "lib/connection/Connection.js~Connection#pingTimeMs",
    "access": null,
    "description": "The round-trip time for the last packet received",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 18,
    "kind": "member",
    "name": "onstatechange",
    "memberof": "lib/connection/Connection.js~Connection",
    "static": false,
    "longname": "lib/connection/Connection.js~Connection#onstatechange",
    "access": null,
    "description": "StateChange event, raised whenever the connection state changes.",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "function(newState: string, oldState: string)"
      ],
      "spread": false,
      "description": null
    },
    "emits": [
      {
        "types": [
          "StateChangeEvent"
        ],
        "description": "the state connection state has changed"
      }
    ]
  },
  {
    "__docId__": 19,
    "kind": "member",
    "name": "onresponsedata",
    "memberof": "lib/connection/Connection.js~Connection",
    "static": false,
    "longname": "lib/connection/Connection.js~Connection#onresponsedata",
    "access": null,
    "description": "ResponseData event, raised when the connection has received new data\nfrom the robot. The data is a raw string as generated by the robot\nfirmware.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "function(data: string)"
      ],
      "spread": false,
      "description": null
    },
    "emits": [
      {
        "types": [
          "ResponseDataEvent"
        ],
        "description": "new data received"
      }
    ]
  },
  {
    "__docId__": 20,
    "kind": "member",
    "name": "responseData",
    "memberof": "lib/connection/Connection.js~Connection",
    "static": false,
    "longname": "lib/connection/Connection.js~Connection#responseData",
    "access": "private",
    "description": "",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 21,
    "kind": "member",
    "name": "dataPacket",
    "memberof": "lib/connection/Connection.js~Connection",
    "static": false,
    "longname": "lib/connection/Connection.js~Connection#dataPacket",
    "access": "private",
    "description": "",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 22,
    "kind": "method",
    "name": "start",
    "memberof": "lib/connection/Connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/connection/Connection.js~Connection#start",
    "access": null,
    "description": " Start connection to the robot.",
    "lineNumber": 75,
    "params": []
  },
  {
    "__docId__": 23,
    "kind": "member",
    "name": "enabled",
    "memberof": "lib/connection/Connection.js~Connection",
    "static": false,
    "longname": "lib/connection/Connection.js~Connection#enabled",
    "access": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 24,
    "kind": "method",
    "name": "stop",
    "memberof": "lib/connection/Connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/connection/Connection.js~Connection#stop",
    "access": null,
    "description": " Stop connection to the robot.",
    "lineNumber": 82,
    "params": []
  },
  {
    "__docId__": 25,
    "kind": "member",
    "name": "enabled",
    "memberof": "lib/connection/Connection.js~Connection",
    "static": false,
    "longname": "lib/connection/Connection.js~Connection#enabled",
    "access": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "method",
    "name": "setState",
    "memberof": "lib/connection/Connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/connection/Connection.js~Connection#setState",
    "access": "private",
    "description": "Update the connection state and notify listeners if the state\nhas changed.",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "newState",
        "description": "the new state"
      }
    ]
  },
  {
    "__docId__": 27,
    "kind": "member",
    "name": "state",
    "memberof": "lib/connection/Connection.js~Connection",
    "static": false,
    "longname": "lib/connection/Connection.js~Connection#state",
    "access": null,
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 28,
    "kind": "method",
    "name": "setRobotData",
    "memberof": "lib/connection/Connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/connection/Connection.js~Connection#setRobotData",
    "access": "protected",
    "description": "Set the raw data packet to send to the robot. The actual connection\noperates asynchronously, so this method should be called as frequently\nas new data is available.\n\nIf an object is passed, it will be converted to JSON.",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "object",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "the data packet to send"
      }
    ]
  },
  {
    "__docId__": 29,
    "kind": "member",
    "name": "dataPacket",
    "memberof": "lib/connection/Connection.js~Connection",
    "static": false,
    "longname": "lib/connection/Connection.js~Connection#dataPacket",
    "access": null,
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 30,
    "kind": "method",
    "name": "getResponseData",
    "memberof": "lib/connection/Connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/connection/Connection.js~Connection#getResponseData",
    "access": "protected",
    "description": "Get the latest raw data packet received from the robot. This is set\nasynchronously by the connection.",
    "lineNumber": 125,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "last robot data packet"
    }
  },
  {
    "__docId__": 31,
    "kind": "method",
    "name": "setResponseData",
    "memberof": "lib/connection/Connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/connection/Connection.js~Connection#setResponseData",
    "access": "private",
    "description": "Called by connections to set the latest response data and update\nany listeners.",
    "lineNumber": 136,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "the data packet received"
      }
    ]
  },
  {
    "__docId__": 32,
    "kind": "member",
    "name": "responseData",
    "memberof": "lib/connection/Connection.js~Connection",
    "static": false,
    "longname": "lib/connection/Connection.js~Connection#responseData",
    "access": null,
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 33,
    "kind": "member",
    "name": "pingTimeMs",
    "memberof": "lib/connection/Connection.js~Connection",
    "static": false,
    "longname": "lib/connection/Connection.js~Connection#pingTimeMs",
    "access": null,
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 34,
    "kind": "file",
    "name": "lib/connection/WebSocketConnection.js",
    "content": "/* globals WebSocket */\nimport Connection from './Connection'\n\n/**\n * Robot connection implemented with a WebSocket. This connection allows\n * for higher update rates, but it requires a modern phone OS / browser.\n *\n * @class\n */\nexport default class WebSocketConnection extends Connection {\n  /**\n   * Constructor.\n   *\n   * @param {?string} hostName hostname to connect to\n   */\n  constructor (hostName) {\n    super()\n    const { hostname, port } = document.location\n    /** @private */\n    this.hostName = hostName || (port !== 80) ? `${hostname}:${port}` : hostname\n    /** @private */\n    this.socket = null\n    /** @private */\n    this.startTimeMs = null\n  }\n\n  start () {\n    this.setState(Connection.CONNECTING)\n    super.start()\n\n    this.startTimeMs = new Date().getTime()\n    this.socket = new WebSocket(`ws://${this.hostName}/ws`, [ 'arduino' ])\n    this.socket.onopen = () => {\n      this.setState(Connection.CONNECTED)\n    }\n    this.socket.onerror = (err) => {\n      this.lastError = err\n      this.setState(Connection.ERROR)\n      this.setResponseData(null)\n    }\n    this.socket.onmessage = (event) => {\n      // compute update rate //\n      this.pingTimeMs = new Date().getTime() - this.startTimeMs\n\n      this.setResponseData(event.data)\n    }\n    this.socket.onclose = (event) => {\n      if (this.state !== Connection.ERROR) {\n        this.lastError = new Error('Connection lost')\n        this.setState(Connection.ERROR)\n        this.setResponseData(null)\n        this.socket = null\n      }\n    }\n  }\n\n  stop () {\n    if (this.socket) {\n      if (this.socket.readyState === WebSocket.OPEN) {\n        this.socket.close()\n      }\n      this.setResponseData(null)\n      this.socket = null\n    }\n    super.stop()\n    this.setState(Connection.DISCONNECTED)\n  }\n\n  setRobotData (data) {\n    super.setRobotData(data)\n\n    // send an update //\n    if (this.socket && this.state === Connection.CONNECTED) {\n      // verify WebSocket state //\n      if (this.socket.readyState !== WebSocket.OPEN) {\n        this.lastError = new Error(`Invalid socket state: ${\n            (this.socket.readyState === WebSocket.CONNECTING) ? 'CONNECTING'\n          : (this.socket.readyState === WebSocket.CLOSING) ? 'CLOSING'\n          : (this.socket.readyState === WebSocket.CLOSED) ? 'CLOSED'\n          : 'UNKNOWN'\n        }`)\n        this.setState(Connection.ERROR)\n        return\n      }\n      try {\n        this.startTimeMs = new Date().getTime()\n        this.socket.send(this.dataPacket)\n      } catch (err) {\n        this.lastError = err\n        this.setState(Connection.ERROR)\n        this.setResponseData(null)\n      }\n    }\n  }\n}\n",
    "static": true,
    "longname": "lib/connection/WebSocketConnection.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 35,
    "kind": "class",
    "name": "WebSocketConnection",
    "memberof": "lib/connection/WebSocketConnection.js",
    "static": true,
    "longname": "lib/connection/WebSocketConnection.js~WebSocketConnection",
    "access": null,
    "export": true,
    "importPath": "combatbot-bot-client/lib/connection/WebSocketConnection.js",
    "importStyle": "WebSocketConnection",
    "description": "Robot connection implemented with a WebSocket. This connection allows\nfor higher update rates, but it requires a modern phone OS / browser.",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "lib/connection/Connection.js~Connection"
    ]
  },
  {
    "__docId__": 36,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/connection/WebSocketConnection.js~WebSocketConnection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/connection/WebSocketConnection.js~WebSocketConnection#constructor",
    "access": null,
    "description": "Constructor.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hostName",
        "description": "hostname to connect to"
      }
    ]
  },
  {
    "__docId__": 37,
    "kind": "member",
    "name": "hostName",
    "memberof": "lib/connection/WebSocketConnection.js~WebSocketConnection",
    "static": false,
    "longname": "lib/connection/WebSocketConnection.js~WebSocketConnection#hostName",
    "access": "private",
    "description": null,
    "lineNumber": 20,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 38,
    "kind": "member",
    "name": "socket",
    "memberof": "lib/connection/WebSocketConnection.js~WebSocketConnection",
    "static": false,
    "longname": "lib/connection/WebSocketConnection.js~WebSocketConnection#socket",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 39,
    "kind": "member",
    "name": "startTimeMs",
    "memberof": "lib/connection/WebSocketConnection.js~WebSocketConnection",
    "static": false,
    "longname": "lib/connection/WebSocketConnection.js~WebSocketConnection#startTimeMs",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 40,
    "kind": "method",
    "name": "start",
    "memberof": "lib/connection/WebSocketConnection.js~WebSocketConnection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/connection/WebSocketConnection.js~WebSocketConnection#start",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 41,
    "kind": "member",
    "name": "startTimeMs",
    "memberof": "lib/connection/WebSocketConnection.js~WebSocketConnection",
    "static": false,
    "longname": "lib/connection/WebSocketConnection.js~WebSocketConnection#startTimeMs",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 42,
    "kind": "member",
    "name": "socket",
    "memberof": "lib/connection/WebSocketConnection.js~WebSocketConnection",
    "static": false,
    "longname": "lib/connection/WebSocketConnection.js~WebSocketConnection#socket",
    "access": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 43,
    "kind": "member",
    "name": "lastError",
    "memberof": "lib/connection/WebSocketConnection.js~WebSocketConnection",
    "static": false,
    "longname": "lib/connection/WebSocketConnection.js~WebSocketConnection#lastError",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 44,
    "kind": "member",
    "name": "pingTimeMs",
    "memberof": "lib/connection/WebSocketConnection.js~WebSocketConnection",
    "static": false,
    "longname": "lib/connection/WebSocketConnection.js~WebSocketConnection#pingTimeMs",
    "access": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 45,
    "kind": "member",
    "name": "lastError",
    "memberof": "lib/connection/WebSocketConnection.js~WebSocketConnection",
    "static": false,
    "longname": "lib/connection/WebSocketConnection.js~WebSocketConnection#lastError",
    "access": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 46,
    "kind": "member",
    "name": "socket",
    "memberof": "lib/connection/WebSocketConnection.js~WebSocketConnection",
    "static": false,
    "longname": "lib/connection/WebSocketConnection.js~WebSocketConnection#socket",
    "access": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 47,
    "kind": "method",
    "name": "stop",
    "memberof": "lib/connection/WebSocketConnection.js~WebSocketConnection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/connection/WebSocketConnection.js~WebSocketConnection#stop",
    "access": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 48,
    "kind": "member",
    "name": "socket",
    "memberof": "lib/connection/WebSocketConnection.js~WebSocketConnection",
    "static": false,
    "longname": "lib/connection/WebSocketConnection.js~WebSocketConnection#socket",
    "access": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 49,
    "kind": "method",
    "name": "setRobotData",
    "memberof": "lib/connection/WebSocketConnection.js~WebSocketConnection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/connection/WebSocketConnection.js~WebSocketConnection#setRobotData",
    "access": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 50,
    "kind": "member",
    "name": "lastError",
    "memberof": "lib/connection/WebSocketConnection.js~WebSocketConnection",
    "static": false,
    "longname": "lib/connection/WebSocketConnection.js~WebSocketConnection#lastError",
    "access": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "startTimeMs",
    "memberof": "lib/connection/WebSocketConnection.js~WebSocketConnection",
    "static": false,
    "longname": "lib/connection/WebSocketConnection.js~WebSocketConnection#startTimeMs",
    "access": null,
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "lastError",
    "memberof": "lib/connection/WebSocketConnection.js~WebSocketConnection",
    "static": false,
    "longname": "lib/connection/WebSocketConnection.js~WebSocketConnection#lastError",
    "access": null,
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "file",
    "name": "lib/connection/index.js",
    "content": "// re-export the individual modules //\nexport { default as Connection } from './Connection'\nexport { default as AjaxConnection } from './AjaxConnection'\nexport { default as WebSocketConnection } from './WebSocketConnection'\n",
    "static": true,
    "longname": "lib/connection/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "lib/controls/Button.js",
    "content": "import ControlManager from './ControlManager'\nimport Control from './Control'\n\n/**\n * Button for on-off control or selecting amongs discrete choices.\n *\n * This class can operate in multiple modes.\n *\n * ## Momentary mode ##\n * In this mode, the button will only register as pressed if it is actively\n * being touched. Once the touch ends, the button is no longer pressed. Physically,\n * this corresponds to spring loaded button. This is the default mode.\n *\n * ```javascript\n * // not actually needed, this is the default mode\n * myButton.sticky = false;\n * ```\n *\n * ## Toggle mode ##\n * In this mode, the button will flip between being pressed and unpressed every\n * time it is touched and released. Physically, this corresponds to a click-on, click-off\n * button.\n *\n * To set this mode, set sticky to `true`.\n * ```javascript\n * myButton.sticky = true;\n * ```\n *\n * ## Group (radio button) mode ##\n * In this mode, buttons are placed into a mutually-exclusive group where only one can\n * be pressed at a time. Physicially, this corresponds to spring-loaded buttons on\n * antique devices such as radios and tape decks.\n *\n * Using this mode requires that the set of buttons be placed in a group. This is done\n * by assigning the same `groupName` property to multiple buttons. Buttons in a group\n * are automatically sticky, so the `sticky` property is ignored.\n * ```javascript\n * myButton1 = new Button('button1');\n * myButton1.groupName = 'myButtons';\n * myButton2 = new Button('button2');\n * myButton2.groupName = 'myButtons';\n * ```\n * By default, the first button that is assigned to a group starts as the initial\n * selected Button. In the example above, this would be `myButton1`. You can change\n * this behavior by manually setting the initial Button to pressed. To make `myButton2`\n * start pressed, do the follow:\n * ```javascript\n * myButton2.pressed = true;\n * ```\n */\nexport default class Button extends Control {\n  /**\n   * Constructor. Create a Button and add it to the canvas.\n   * @override\n   * @param {!string} name - the joystick name\n   * @throws {Error} control already exists with specified name\n   */\n  constructor (name) {\n    super(name)\n    /**\n     * The placement of the Button on the canvas. For dimension values,\n     * see {@link ControlManager.convertToPixels}.\n     *\n     * @example <caption>Set individually</caption>\n     * myButton.position.x = 10;\n     * myButton.position.y = 20;\n     *\n     * @example <caption>Set as an Object literal</caption>\n     * myButton.position = { x: 10, y: 20 };\n     *\n     * @type {Position}\n     */\n    this.position = { x: 0, y: 0 }\n    /**\n     * The radius of the Button. Bigger buttons are easier to push, but\n     * the take up more space. In other news, the sky is blue.\n     *\n     * @example\n     * myJoystick.radius = 10;\n     *\n     * @type {number}\n     */\n    this.radius = 10\n    /**\n     * Should the button stay pressed until touched again to turn off. This value\n     * is ignored if the button is part of a group.\n     *\n     * Defaults to `false`.\n     *\n     * @type {boolean}\n     */\n    this.sticky = false\n    /**\n     * Set this property to the same value on multiple Buttons to make them part of\n     * a group. Buttons in a group are mutually exclusive, only one can be pressed\n     * at a time.\n     * @type {?string}\n     */\n    this.groupName = null\n    /**\n     * Style to draw.\n     * @type {string}\n     */\n    this.style = 'white'\n    /**\n     * *Output* - True if the Button is pressed.\n     * @type {boolean}\n     */\n    this.pressed = false\n  }\n\n  /**\n   * Get Button dimensions.\n   *\n   * @protected\n   * @return {Map<string,number|string>} named dimension collection, in raw form\n   * @property {!(number|string)} x - the x coordinate\n   * @property {!(number|string)} y - the y coordinate\n   * @property {!(number|string)} r - the radius\n   */\n  getDimensions () {\n    return { x: this.position.x, y: this.position.y, r: this.radius }\n  }\n\n  /**\n   * Is the specified touch inside the Button.\n   *\n   * This method is called by the framework, so need not be used directly.\n   *\n   * @override\n   * @protected\n   * @param {!TouchEvent} touch - the TouchEvent to test\n   * @return {boolean} - true if the control matches the event\n   */\n  matchesTouch (touch) {\n    const { clientX, clientY } = touch\n    const { x, y, r } = this.getPixelDimensions()\n\n    const dx = (x - clientX)\n    const dy = (y - clientY)\n    return Math.sqrt(dx * dx + dy * dy) <= r\n  }\n\n  /**\n   * A touch tracked by the Button has been updated. Buttons only respond\n   * to first instance of a TouchEvent (start) and the call where the TouchEvent\n   * is cleared to null (end). The exact behavior depends on the setting of\n   * {@link Button#sticky} and {@link Button#groupName}.\n   *\n   * This method is called by the framework, so need not be used directly.\n   *\n   * @override\n   * @protected\n   * @param {?TouchEvent} touch - the TouchEvent to test\n   */\n  setTouch (touch) {\n    const lastState = !!this.touch\n    console.log(this.sticky, this.touch, lastState, touch, this.pressed)\n    super.setTouch(touch)\n    if (this.sticky || this.groupName) {\n      // only react to touchStart //\n      if (touch && !lastState) {\n        // are we part of a group //\n        if (this.groupName) {\n          // only react to changed values //\n          if (!this.pressed) {\n            // clear all others in group //\n            for (const controlName in ControlManager.controls) {\n              const control = ControlManager.controls[controlName]\n              if (control instanceof Button && control.groupName === this.groupName) {\n                control.pressed = false\n              }\n            }\n            this.pressed = true\n          }\n        } else {\n          // just toggle this button //\n          this.pressed = !!(this.pressed ^ true)\n        }\n      }\n    } else {\n      this.pressed = !!touch\n    }\n  }\n\n  /**\n   * Draw the Button on the canvas.\n   *\n   * This method is called by the framework, so need not be used directly.\n   *\n   * @protected\n   * @param {!CanvasRenderingContext2D} ctx - the 2D drawing context\n   */\n  draw (ctx) {\n    const { x, y, r } = this.getPixelDimensions()\n\n    ctx.beginPath()\n    ctx.strokeStyle = this.style\n    ctx.fillStyle = this.style\n    ctx.lineWidth = 6\n    ctx.arc(x, y, r, 0, Math.PI * 2, true)\n    if (this.pressed) {\n      ctx.fill()\n    } else {\n      ctx.stroke()\n    }\n\n    ctx.beginPath()\n    ctx.fillStyle = 'white'\n    ctx.fillText(\n      `${this.name}, pressed: ${this.pressed}`,\n      x - 50, y + r + 15\n    )\n  }\n}\n",
    "static": true,
    "longname": "lib/controls/Button.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "class",
    "name": "Button",
    "memberof": "lib/controls/Button.js",
    "static": true,
    "longname": "lib/controls/Button.js~Button",
    "access": null,
    "export": true,
    "importPath": "combatbot-bot-client/lib/controls/Button.js",
    "importStyle": "Button",
    "description": "Button for on-off control or selecting amongs discrete choices.\n\nThis class can operate in multiple modes.\n\n## Momentary mode ##\nIn this mode, the button will only register as pressed if it is actively\nbeing touched. Once the touch ends, the button is no longer pressed. Physically,\nthis corresponds to spring loaded button. This is the default mode.\n\n```javascript\n// not actually needed, this is the default mode\nmyButton.sticky = false;\n```\n\n## Toggle mode ##\nIn this mode, the button will flip between being pressed and unpressed every\ntime it is touched and released. Physically, this corresponds to a click-on, click-off\nbutton.\n\nTo set this mode, set sticky to `true`.\n```javascript\nmyButton.sticky = true;\n```\n\n## Group (radio button) mode ##\nIn this mode, buttons are placed into a mutually-exclusive group where only one can\nbe pressed at a time. Physicially, this corresponds to spring-loaded buttons on\nantique devices such as radios and tape decks.\n\nUsing this mode requires that the set of buttons be placed in a group. This is done\nby assigning the same `groupName` property to multiple buttons. Buttons in a group\nare automatically sticky, so the `sticky` property is ignored.\n```javascript\nmyButton1 = new Button('button1');\nmyButton1.groupName = 'myButtons';\nmyButton2 = new Button('button2');\nmyButton2.groupName = 'myButtons';\n```\nBy default, the first button that is assigned to a group starts as the initial\nselected Button. In the example above, this would be `myButton1`. You can change\nthis behavior by manually setting the initial Button to pressed. To make `myButton2`\nstart pressed, do the follow:\n```javascript\nmyButton2.pressed = true;\n```",
    "lineNumber": 51,
    "interface": false,
    "extends": [
      "lib/controls/Control.js~Control"
    ]
  },
  {
    "__docId__": 56,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/controls/Button.js~Button",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/controls/Button.js~Button#constructor",
    "access": null,
    "description": "Constructor. Create a Button and add it to the canvas.",
    "lineNumber": 58,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the joystick name"
      }
    ],
    "override": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "control already exists with specified name"
      }
    ]
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "position",
    "memberof": "lib/controls/Button.js~Button",
    "static": false,
    "longname": "lib/controls/Button.js~Button#position",
    "access": null,
    "description": "The placement of the Button on the canvas. For dimension values,\nsee {@link ControlManager.convertToPixels}.",
    "examples": [
      "<caption>Set individually</caption>\nmyButton.position.x = 10;\nmyButton.position.y = 20;",
      "<caption>Set as an Object literal</caption>\nmyButton.position = { x: 10, y: 20 };"
    ],
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "Position"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "radius",
    "memberof": "lib/controls/Button.js~Button",
    "static": false,
    "longname": "lib/controls/Button.js~Button#radius",
    "access": null,
    "description": "The radius of the Button. Bigger buttons are easier to push, but\nthe take up more space. In other news, the sky is blue.",
    "examples": [
      "myJoystick.radius = 10;"
    ],
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "sticky",
    "memberof": "lib/controls/Button.js~Button",
    "static": false,
    "longname": "lib/controls/Button.js~Button#sticky",
    "access": null,
    "description": "Should the button stay pressed until touched again to turn off. This value\nis ignored if the button is part of a group.\n\nDefaults to `false`.",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "groupName",
    "memberof": "lib/controls/Button.js~Button",
    "static": false,
    "longname": "lib/controls/Button.js~Button#groupName",
    "access": null,
    "description": "Set this property to the same value on multiple Buttons to make them part of\na group. Buttons in a group are mutually exclusive, only one can be pressed\nat a time.",
    "lineNumber": 99,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "style",
    "memberof": "lib/controls/Button.js~Button",
    "static": false,
    "longname": "lib/controls/Button.js~Button#style",
    "access": null,
    "description": "Style to draw.",
    "lineNumber": 104,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "pressed",
    "memberof": "lib/controls/Button.js~Button",
    "static": false,
    "longname": "lib/controls/Button.js~Button#pressed",
    "access": null,
    "description": "*Output* - True if the Button is pressed.",
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "getDimensions",
    "memberof": "lib/controls/Button.js~Button",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/controls/Button.js~Button#getDimensions",
    "access": "protected",
    "description": "Get Button dimensions.",
    "lineNumber": 121,
    "params": [],
    "properties": [
      {
        "nullable": false,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "the x coordinate"
      },
      {
        "nullable": false,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "the y coordinate"
      },
      {
        "nullable": false,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "the radius"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Map<string,number|string>"
      ],
      "spread": false,
      "description": "named dimension collection, in raw form"
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "matchesTouch",
    "memberof": "lib/controls/Button.js~Button",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/controls/Button.js~Button#matchesTouch",
    "access": "protected",
    "description": "Is the specified touch inside the Button.\n\nThis method is called by the framework, so need not be used directly.",
    "lineNumber": 135,
    "params": [
      {
        "nullable": false,
        "types": [
          "TouchEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "touch",
        "description": "the TouchEvent to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the control matches the event"
    },
    "override": true
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "setTouch",
    "memberof": "lib/controls/Button.js~Button",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/controls/Button.js~Button#setTouch",
    "access": "protected",
    "description": "A touch tracked by the Button has been updated. Buttons only respond\nto first instance of a TouchEvent (start) and the call where the TouchEvent\nis cleared to null (end). The exact behavior depends on the setting of\n{@link Button#sticky} and {@link Button#groupName}.\n\nThis method is called by the framework, so need not be used directly.",
    "lineNumber": 156,
    "params": [
      {
        "nullable": true,
        "types": [
          "TouchEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "touch",
        "description": "the TouchEvent to test"
      }
    ],
    "override": true
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "pressed",
    "memberof": "lib/controls/Button.js~Button",
    "static": false,
    "longname": "lib/controls/Button.js~Button#pressed",
    "access": null,
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "pressed",
    "memberof": "lib/controls/Button.js~Button",
    "static": false,
    "longname": "lib/controls/Button.js~Button#pressed",
    "access": null,
    "description": null,
    "lineNumber": 178,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "pressed",
    "memberof": "lib/controls/Button.js~Button",
    "static": false,
    "longname": "lib/controls/Button.js~Button#pressed",
    "access": null,
    "description": null,
    "lineNumber": 182,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "draw",
    "memberof": "lib/controls/Button.js~Button",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/controls/Button.js~Button#draw",
    "access": "protected",
    "description": "Draw the Button on the canvas.\n\nThis method is called by the framework, so need not be used directly.",
    "lineNumber": 194,
    "params": [
      {
        "nullable": false,
        "types": [
          "CanvasRenderingContext2D"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "the 2D drawing context"
      }
    ]
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "lib/controls/Control.js",
    "content": "import ControlManager from './ControlManager'\n\n// internal state //\nlet _controlCount = 0\n\n/**\n * An object representing the position of the a {@link Control} on the\n * canvas.\n *\n * @typedef {Object} Position\n * @property {!(number|string)} x - the x position\n * @property {!(number|string)} y - the y position\n */\n\n/**\n * Abstract base class for all UI controls.\n *\n * Extend this class to implement your own UI controls. In most code, this\n * will not be needed.\n *\n * @abstract\n */\nexport default class Control {\n  /**\n   * Constructor.\n   *\n   * Create a control with the specified name. If no name is supplied, a\n   * name will be generated of the form `control####`, where `####` is a\n   * sequential integer.\n   *\n   * Note that control names must be unique. If a control by the same name\n   * already exists, an initialization exception will be thrown.\n   *\n   * @protected\n   * @param {string} name - the control name\n   * @throws {Error} control already exists with specified name\n   */\n  constructor (name) {\n    /**\n     * The control name\n     * @type {string}\n     */\n    this.name = name || `control${++_controlCount}`\n    /**\n     * The currently tracked {@link TouchEvent}, or null if no event is being\n     * tracked by this control.\n     *\n     * @protected\n     * @type {TouchEvent}\n     */\n    this.touch = null\n    /** @private */\n    this.pixelCache = null\n    ControlManager.registerControl(this)\n  }\n\n  /**\n   * Determine if the Control matches the specified {@link TouchEvent}.\n   *\n   * This method will generally contain computation geometry code that\n   * compares the input TouchEvent coordinates to the bounds of the {@link Control}.\n   *\n   * @abstract\n   * @protected\n   * @param {!TouchEvent} touch - the TouchEvent to test\n   * @return {boolean} - true if the control matches the event\n   */\n  matchesTouch (touch) {\n    return false\n  }\n\n  /**\n   * Called by the {@link ControlManager} when the control is tracking a TouchEvent.\n   * A Control begins tracking by returning true from {@link Control#matchesTouch}).\n   *\n   * Should be overridden by subclasses to update any internal state or outputs\n   * that are dependent on the latest touch.\n   *\n   * Will be passed `null` to indicate that the tracked TouchEvent has ended.\n   *\n   * @protected\n   * @param {?TouchEvent} touch - the TouchEvent to test\n   */\n  setTouch (touch) {\n    this.touch = touch\n  }\n\n  /**\n   * Returns a map of all important coordinates used by this control. The values\n   * are in the raw, polymorphic form, see {@link ControlManager.convertToPixels}\n   *\n   * This allows the base class to manage the conversion to pixels and cache the\n   * complete result for performance / frame rate reasons.\n   *\n   * @abstract\n   * @protected\n   * @return {Map<string,number|string>} named dimension collection, in raw form\n   */\n  getDimensions () {\n    return { }\n  }\n\n  /**\n   * Get the control dimensions converted to pixels relative\n   * to the current canvas size. This cached for performance reasons.\n   *\n   * @protected\n   * @returns {Map<string,number>} named dimension collection, in pixels\n   */\n  getPixelDimensions () {\n    if (this.pixelCache) return this.pixelCache\n    const dimensions = this.getDimensions()\n    const pixels = {}\n    for (const dimName in dimensions) {\n      pixels[dimName] = ControlManager.convertToPixels(dimName, dimensions[dimName])\n    }\n    return (this.pixelCache = pixels)\n  }\n\n  /**\n   * Draw the Control on the canvas.\n   *\n   * @abstract\n   * @protected\n   * @param {!CanvasRenderingContext2D} ctx - the 2D drawing context\n   */\n  draw (ctx) {\n\n  }\n}\n",
    "static": true,
    "longname": "lib/controls/Control.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "_controlCount",
    "memberof": "lib/controls/Control.js",
    "static": true,
    "longname": "lib/controls/Control.js~_controlCount",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client/lib/controls/Control.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "typedef",
    "name": "Position",
    "memberof": "lib/controls/Control.js",
    "static": true,
    "longname": "lib/controls/Control.js~Position",
    "access": null,
    "description": "An object representing the position of the a {@link Control} on the\ncanvas.",
    "properties": [
      {
        "nullable": false,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "the x position"
      },
      {
        "nullable": false,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "the y position"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Position"
    }
  },
  {
    "__docId__": 73,
    "kind": "class",
    "name": "Control",
    "memberof": "lib/controls/Control.js",
    "static": true,
    "longname": "lib/controls/Control.js~Control",
    "access": null,
    "export": true,
    "importPath": "combatbot-bot-client/lib/controls/Control.js",
    "importStyle": "Control",
    "description": "Abstract base class for all UI controls.\n\nExtend this class to implement your own UI controls. In most code, this\nwill not be needed.",
    "lineNumber": 23,
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 74,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/controls/Control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/controls/Control.js~Control#constructor",
    "access": "protected",
    "description": "Constructor.\n\nCreate a control with the specified name. If no name is supplied, a\nname will be generated of the form `control####`, where `####` is a\nsequential integer.\n\nNote that control names must be unique. If a control by the same name\nalready exists, an initialization exception will be thrown.",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the control name"
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "control already exists with specified name"
      }
    ]
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "name",
    "memberof": "lib/controls/Control.js~Control",
    "static": false,
    "longname": "lib/controls/Control.js~Control#name",
    "access": null,
    "description": "The control name",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "touch",
    "memberof": "lib/controls/Control.js~Control",
    "static": false,
    "longname": "lib/controls/Control.js~Control#touch",
    "access": "protected",
    "description": "The currently tracked {@link TouchEvent}, or null if no event is being\ntracked by this control.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "TouchEvent"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "pixelCache",
    "memberof": "lib/controls/Control.js~Control",
    "static": false,
    "longname": "lib/controls/Control.js~Control#pixelCache",
    "access": "private",
    "description": null,
    "lineNumber": 53,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "matchesTouch",
    "memberof": "lib/controls/Control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/controls/Control.js~Control#matchesTouch",
    "access": "protected",
    "description": "Determine if the Control matches the specified {@link TouchEvent}.\n\nThis method will generally contain computation geometry code that\ncompares the input TouchEvent coordinates to the bounds of the {@link Control}.",
    "lineNumber": 68,
    "params": [
      {
        "nullable": false,
        "types": [
          "TouchEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "touch",
        "description": "the TouchEvent to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the control matches the event"
    },
    "abstract": true
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "setTouch",
    "memberof": "lib/controls/Control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/controls/Control.js~Control#setTouch",
    "access": "protected",
    "description": "Called by the {@link ControlManager} when the control is tracking a TouchEvent.\nA Control begins tracking by returning true from {@link Control#matchesTouch}).\n\nShould be overridden by subclasses to update any internal state or outputs\nthat are dependent on the latest touch.\n\nWill be passed `null` to indicate that the tracked TouchEvent has ended.",
    "lineNumber": 84,
    "params": [
      {
        "nullable": true,
        "types": [
          "TouchEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "touch",
        "description": "the TouchEvent to test"
      }
    ]
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "touch",
    "memberof": "lib/controls/Control.js~Control",
    "static": false,
    "longname": "lib/controls/Control.js~Control#touch",
    "access": null,
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "getDimensions",
    "memberof": "lib/controls/Control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/controls/Control.js~Control#getDimensions",
    "access": "protected",
    "description": "Returns a map of all important coordinates used by this control. The values\nare in the raw, polymorphic form, see {@link ControlManager.convertToPixels}\n\nThis allows the base class to manage the conversion to pixels and cache the\ncomplete result for performance / frame rate reasons.",
    "lineNumber": 99,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Map<string,number|string>"
      ],
      "spread": false,
      "description": "named dimension collection, in raw form"
    },
    "abstract": true
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "getPixelDimensions",
    "memberof": "lib/controls/Control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/controls/Control.js~Control#getPixelDimensions",
    "access": "protected",
    "description": "Get the control dimensions converted to pixels relative\nto the current canvas size. This cached for performance reasons.",
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Map<string,number>} named dimension collection, in pixels"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Map<string,number>"
      ],
      "spread": false,
      "description": "named dimension collection, in pixels"
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "draw",
    "memberof": "lib/controls/Control.js~Control",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/controls/Control.js~Control#draw",
    "access": "protected",
    "description": "Draw the Control on the canvas.",
    "lineNumber": 127,
    "params": [
      {
        "nullable": false,
        "types": [
          "CanvasRenderingContext2D"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "the 2D drawing context"
      }
    ],
    "abstract": true
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "lib/controls/ControlManager.js",
    "content": "import Button from './Button'\n\n// constants //\nconst FRAME_RATE = 30\n\n// internal state //\nconst _touchOwners = { }\nconst _controls = { }\nlet _canvas = null\nlet _context = null\nlet _intervalID = null\nlet _oldWidth = 0\nlet _oldHeight = 0\n\n/**\n * Event wrapper to unify multi-touch and mouse events.\n * @protected\n *\n * @typedef {Object} TouchEvent\n * @property {!string} identifer unique identifier (from DOM for multi-touch, 'mouse' if from mouse)\n * @property {!number} clientX the X position in pixels, relative to canvas origin (top left)\n * @property {!number} clientY the Y position in pixles, relative to canvas origin (top left)\n * @property {number} [force] the force of the touch, null for mouse\n */\n\n/**\n * Transforms DOM touch (or mouse) event to pixel coordinates relative to\n * the canvas. This is needed because the coordinates are relative to the\n * screen. Need to subtract the canvas position to compensate.\n *\n * @param {Object} touch the DOM touch event\n * @return {TouchEvent}\n */\nfunction transformTouch (touch) {\n  return {\n    identifier: touch.identifier,\n    clientX: Math.round(touch.clientX - _canvas.offsetLeft),\n    clientY: Math.round(touch.clientY - _canvas.offsetTop),\n    force: touch.force\n  }\n}\n\n/**\n * Attempt to process a new touch event. Queries all controls for\n * for first one that responds true to @link Control#matchesTouch.\n *\n * The first match captures the touch and will receive all updates\n * through the @link Control#setTouch call.\n *\n * @param {Object} touch the DOM touch event\n */\nfunction doAdd (touch) {\n  if (typeof touch.identifier === 'undefined') touch.identifier = 'mouse'\n  touch = transformTouch(touch)\n\n  // loop through controls and see if one captures the touch //\n  for (const controlName in ControlManager.controls) {\n    const control = ControlManager.controls[controlName]\n    if (control.matchesTouch(touch)) {\n      _touchOwners[touch.identifier] = control\n      control.setTouch(touch)\n      fireUpdate()\n      break\n    }\n  }\n}\n\n/**\n * If the specified touch has been captured, funnel it to the\n * @link Control#setTouch method of the owner control.\n *\n * @param {Object} touch the DOM touch event\n */\nfunction doUpdate (touch) {\n  if (typeof touch.identifier === 'undefined') touch.identifier = 'mouse'\n  const control = _touchOwners[touch.identifier]\n  if (!control) return\n  control.setTouch(transformTouch(touch))\n  fireUpdate()\n}\n\n/**\n * If the specified touch has been captured, signal the capturing control\n * that it has ended by passing null to @line Control#setTouch.\n *\n * @param {Object} touch the DOM touch event\n */\nfunction doRemove (touch) {\n  if (typeof touch.identifier === 'undefined') touch.identifier = 'mouse'\n  const control = _touchOwners[touch.identifier]\n  if (!control) return\n  control.setTouch(null)\n  delete _touchOwners[touch.identifier]\n  fireUpdate()\n}\n\n/**\n * Fire the update event, if one is defined.\n */\nfunction fireUpdate () {\n  const { onupdate } = ControlManager\n  if (typeof onupdate === 'function') {\n    onupdate()\n  }\n}\n\n/**\n * Loop through each {@link Control} and paint it to the canvas.\n */\nfunction drawControls () {\n  // check for canvas resize //\n  const resized = (_canvas.width !== _oldWidth || _canvas.height !== _oldHeight)\n  if (resized) {\n    _oldWidth = _canvas.width\n    _oldHeight = _canvas.height\n  }\n\n  _context.clearRect(0, 0, _canvas.width, _canvas.height)\n\n  // loop through controls //\n  for (const controlName in _controls) {\n    const control = _controls[controlName]\n    if (resized) control.pixelCache = null\n    control.draw(_context)\n  }\n}\n\n/**\n * Manages the display canvas, processing touch events and painting of\n * all user-created controls.\n *\n * The class is part of the core framework infrastructure and should not be\n * needed in your code under most circumstances.\n *\n * @protected\n */\nexport default class ControlManager {\n  /**\n   * All declared {@link Control} instances, keyed by control name.\n   *\n   * @type {Map<string,Control>}\n   */\n  static get controls () {\n    return _controls\n  }\n\n  /**\n   * Initialize the ControlManager with the specified HTML5 canvas object.\n   *\n   * This method will attach the relevant event listeners to monitor the canvas\n   * for touch and mouse events.\n   *\n   * @protected\n   * @param {!HTMLElement} canvas the canvas element\n   */\n  static setCanvas (canvas) {\n    /**\n     * Split all multi-touches in a touch event to discrete calls.\n     */\n    function handleTouches (e, handler) {\n      // prevent scrolling and mouse fallthrough on desktop //\n      e.preventDefault()\n      // loop through touches //\n      for (let i = 0; i < e.changedTouches.length; i++) {\n        handler(e.changedTouches[i])\n      }\n    }\n\n    canvas.addEventListener('touchstart', (e) => handleTouches(e, doAdd), false)\n    canvas.addEventListener('touchmove', (e) => handleTouches(e, doUpdate), false)\n    canvas.addEventListener('touchend', (e) => handleTouches(e, doRemove), false)\n\n    canvas.addEventListener('mousedown', doAdd, false)\n    canvas.addEventListener('mousemove', doUpdate, false)\n    canvas.addEventListener('mouseup', doRemove, false)\n\n    _canvas = canvas\n    _context = canvas.getContext('2d')\n  }\n\n  /**\n   * Start control process and canvas updates.\n   * @protected\n   */\n  static start () {\n    // handle default values of button groups //\n    const buttonGroups = { }\n    for (const controlName in _controls) {\n      const control = _controls[controlName]\n      if (control instanceof Button && control.groupName) {\n        const { groupName } = control\n        if (buttonGroups[groupName]) {\n          buttonGroups[groupName].push(control)\n        } else {\n          buttonGroups[groupName] = [ control ]\n        }\n      }\n    }\n    for (const groupName in buttonGroups) {\n      const buttons = buttonGroups[groupName]\n      // if user has not set a default pressed button, select first //\n      if (!buttons.some(button => button.pressed)) {\n        buttons[0].pressed = true\n      }\n    }\n\n    // start painting //\n    _intervalID = setInterval(() => drawControls(), 1000 / FRAME_RATE)\n  }\n\n  /**\n   * Stop control processing and canvas updates.\n   * @protected\n   */\n  static stop () {\n    if (_intervalID) {\n      clearInterval(_intervalID)\n      _intervalID = null\n    }\n  }\n\n  /**\n   * Converts a flexible dimension string pixels for use on the canvas.\n   *\n   * This method supports multiple different formats.\n   * @example\n   * control.dimension = 50     // 50% of the height or width, depending on context\n   * control.dimension = '50%'  // same as above\n   * control.dimension = '20px' // pixels specified directly, only good for one screen size\n   *\n   * @param {!string} dim - the name of the dimension ('x', 'height', etc.)\n   * @param {!(number|string)} value - raw dimension value, any format\n   * @return {number} result in pixels\n   */\n  static convertToPixels (dim, value) {\n    // determine the reference dimension based on name //\n    let reference\n    switch (dim) {\n      case 'y':\n      case 'height':\n        reference = _canvas.height\n        break\n      default:\n        reference = _canvas.width\n        break\n    }\n\n    // handle based on type //\n    switch (typeof value) {\n      case 'number':\n        // if a fraction, assume a percent //\n        if (value > 0 && value < 1.0) {\n          value *= 100\n        }\n        return Math.round(value * reference / 100)\n      case 'string':\n        const matches = value.match(/^([0-9]+)([^0-9]*)$/)\n        if (matches) {\n          const [ , num, unit ] = matches\n          value = parseInt(num)\n          switch (unit) {\n            case '%':\n            case '':\n              return Math.round(value * reference / 100)\n            case 'px':\n              return value\n          }\n        }\n        // fallthrough //\n      default:\n        return null\n    }\n  }\n\n  /**\n   * Add a new {@link Control} to the ControlManager. This method\n   * is called automatically by the {@link Control} constructor.\n   *\n   * @private\n   * @param {!Control} control - the control\n   * @throws {Error} control with that name already exists\n   */\n  static registerControl (control) {\n    const name = control.name\n    if (_controls[name]) {\n      throw new Error(`Control already exists: ${name}`)\n    }\n    _controls[name] = control\n  }\n}\n",
    "static": true,
    "longname": "lib/controls/ControlManager.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "name": "FRAME_RATE",
    "memberof": "lib/controls/ControlManager.js",
    "static": true,
    "longname": "lib/controls/ControlManager.js~FRAME_RATE",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client/lib/controls/ControlManager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "variable",
    "name": "_touchOwners",
    "memberof": "lib/controls/ControlManager.js",
    "static": true,
    "longname": "lib/controls/ControlManager.js~_touchOwners",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client/lib/controls/ControlManager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "name": "_controls",
    "memberof": "lib/controls/ControlManager.js",
    "static": true,
    "longname": "lib/controls/ControlManager.js~_controls",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client/lib/controls/ControlManager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "_canvas",
    "memberof": "lib/controls/ControlManager.js",
    "static": true,
    "longname": "lib/controls/ControlManager.js~_canvas",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client/lib/controls/ControlManager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "name": "_context",
    "memberof": "lib/controls/ControlManager.js",
    "static": true,
    "longname": "lib/controls/ControlManager.js~_context",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client/lib/controls/ControlManager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "_intervalID",
    "memberof": "lib/controls/ControlManager.js",
    "static": true,
    "longname": "lib/controls/ControlManager.js~_intervalID",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client/lib/controls/ControlManager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "variable",
    "name": "_oldWidth",
    "memberof": "lib/controls/ControlManager.js",
    "static": true,
    "longname": "lib/controls/ControlManager.js~_oldWidth",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client/lib/controls/ControlManager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "_oldHeight",
    "memberof": "lib/controls/ControlManager.js",
    "static": true,
    "longname": "lib/controls/ControlManager.js~_oldHeight",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client/lib/controls/ControlManager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "typedef",
    "name": "TouchEvent",
    "memberof": "lib/controls/ControlManager.js",
    "static": true,
    "longname": "lib/controls/ControlManager.js~TouchEvent",
    "access": "protected",
    "description": "Event wrapper to unify multi-touch and mouse events.",
    "properties": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "identifer",
        "description": "unique identifier (from DOM for multi-touch, 'mouse' if from mouse)"
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "clientX",
        "description": "the X position in pixels, relative to canvas origin (top left)"
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "clientY",
        "description": "the Y position in pixles, relative to canvas origin (top left)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "force",
        "description": "the force of the touch, null for mouse"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TouchEvent"
    }
  },
  {
    "__docId__": 94,
    "kind": "function",
    "name": "transformTouch",
    "memberof": "lib/controls/ControlManager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/controls/ControlManager.js~transformTouch",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client/lib/controls/ControlManager.js",
    "importStyle": null,
    "description": "Transforms DOM touch (or mouse) event to pixel coordinates relative to\nthe canvas. This is needed because the coordinates are relative to the\nscreen. Need to subtract the canvas position to compensate.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "touch",
        "description": "the DOM touch event"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TouchEvent"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 95,
    "kind": "function",
    "name": "doAdd",
    "memberof": "lib/controls/ControlManager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/controls/ControlManager.js~doAdd",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client/lib/controls/ControlManager.js",
    "importStyle": null,
    "description": "Attempt to process a new touch event. Queries all controls for\nfor first one that responds true to @link Control#matchesTouch.\n\nThe first match captures the touch and will receive all updates\nthrough the @link Control#setTouch call.",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "touch",
        "description": "the DOM touch event"
      }
    ]
  },
  {
    "__docId__": 96,
    "kind": "function",
    "name": "doUpdate",
    "memberof": "lib/controls/ControlManager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/controls/ControlManager.js~doUpdate",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client/lib/controls/ControlManager.js",
    "importStyle": null,
    "description": "If the specified touch has been captured, funnel it to the",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "Control#setTouch method of the owner control."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "touch",
        "description": "the DOM touch event"
      }
    ]
  },
  {
    "__docId__": 97,
    "kind": "function",
    "name": "doRemove",
    "memberof": "lib/controls/ControlManager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/controls/ControlManager.js~doRemove",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client/lib/controls/ControlManager.js",
    "importStyle": null,
    "description": "If the specified touch has been captured, signal the capturing control\nthat it has ended by passing null to @line Control#setTouch.",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "touch",
        "description": "the DOM touch event"
      }
    ]
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "fireUpdate",
    "memberof": "lib/controls/ControlManager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/controls/ControlManager.js~fireUpdate",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client/lib/controls/ControlManager.js",
    "importStyle": null,
    "description": "Fire the update event, if one is defined.",
    "lineNumber": 100,
    "params": []
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "drawControls",
    "memberof": "lib/controls/ControlManager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/controls/ControlManager.js~drawControls",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client/lib/controls/ControlManager.js",
    "importStyle": null,
    "description": "Loop through each {@link Control} and paint it to the canvas.",
    "lineNumber": 110,
    "params": []
  },
  {
    "__docId__": 100,
    "kind": "class",
    "name": "ControlManager",
    "memberof": "lib/controls/ControlManager.js",
    "static": true,
    "longname": "lib/controls/ControlManager.js~ControlManager",
    "access": "protected",
    "export": true,
    "importPath": "combatbot-bot-client/lib/controls/ControlManager.js",
    "importStyle": "ControlManager",
    "description": "Manages the display canvas, processing touch events and painting of\nall user-created controls.\n\nThe class is part of the core framework infrastructure and should not be\nneeded in your code under most circumstances.",
    "lineNumber": 137,
    "interface": false
  },
  {
    "__docId__": 101,
    "kind": "get",
    "name": "controls",
    "memberof": "lib/controls/ControlManager.js~ControlManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/controls/ControlManager.js~ControlManager.controls",
    "access": null,
    "description": "All declared {@link Control} instances, keyed by control name.",
    "lineNumber": 143,
    "type": {
      "nullable": null,
      "types": [
        "Map<string,Control>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "setCanvas",
    "memberof": "lib/controls/ControlManager.js~ControlManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/controls/ControlManager.js~ControlManager.setCanvas",
    "access": "protected",
    "description": "Initialize the ControlManager with the specified HTML5 canvas object.\n\nThis method will attach the relevant event listeners to monitor the canvas\nfor touch and mouse events.",
    "lineNumber": 156,
    "params": [
      {
        "nullable": false,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "canvas",
        "description": "the canvas element"
      }
    ]
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "start",
    "memberof": "lib/controls/ControlManager.js~ControlManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/controls/ControlManager.js~ControlManager.start",
    "access": "protected",
    "description": "Start control process and canvas updates.",
    "lineNumber": 185,
    "params": []
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "stop",
    "memberof": "lib/controls/ControlManager.js~ControlManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/controls/ControlManager.js~ControlManager.stop",
    "access": "protected",
    "description": "Stop control processing and canvas updates.",
    "lineNumber": 215,
    "params": []
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "convertToPixels",
    "memberof": "lib/controls/ControlManager.js~ControlManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/controls/ControlManager.js~ControlManager.convertToPixels",
    "access": null,
    "description": "Converts a flexible dimension string pixels for use on the canvas.\n\nThis method supports multiple different formats.",
    "examples": [
      "control.dimension = 50     // 50% of the height or width, depending on context\ncontrol.dimension = '50%'  // same as above\ncontrol.dimension = '20px' // pixels specified directly, only good for one screen size"
    ],
    "lineNumber": 235,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dim",
        "description": "the name of the dimension ('x', 'height', etc.)"
      },
      {
        "nullable": false,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "raw dimension value, any format"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "result in pixels"
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "registerControl",
    "memberof": "lib/controls/ControlManager.js~ControlManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/controls/ControlManager.js~ControlManager.registerControl",
    "access": "private",
    "description": "Add a new {@link Control} to the ControlManager. This method\nis called automatically by the {@link Control} constructor.",
    "lineNumber": 283,
    "params": [
      {
        "nullable": false,
        "types": [
          "Control"
        ],
        "spread": false,
        "optional": false,
        "name": "control",
        "description": "the control"
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "control with that name already exists"
      }
    ]
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "lib/controls/Joystick.js",
    "content": "import Control from './Control'\nimport { constrain } from '../utils'\n\n/**\n * Joystick for two dimensional X-Y control.\n *\n * This is the primary tool for controlling the robot. It functions just like a\n * physical joystick, giving readings in both the X and Y directions.\n *\n * @example <caption>Setting Joystick parametes in 'setup()'</caption>\n * var myJoystick = new Joystick('leftStick');\n * myJoystick.position.x = 40;\n * myJoystick.position.y = 50;\n * myJoystick.radius = 15;\n *\n * @example <caption>Reading Joystick value in 'loop()'</caption>\n * var valueX = myJoystick.x;\n * myMotor.set(valueX);\n */\nexport default class Joystick extends Control {\n  /**\n   * Constructor. Create a new Joystick and add it to the canvas.\n   *\n   * @override\n   * @param {!string} name - the joystick name\n   * @throws {Error} control already exists with specified name\n   */\n  constructor (name) {\n    super(name)\n    /**\n     * The placement of the Joystick on the canvas. For dimension values,\n     * see {@link ControlManager.convertToPixels}.\n     *\n     * @example <caption>Set individually</caption>\n     * myJoystick.position.x = 10;\n     * myJoystick.position.y = 20;\n     *\n     * @example <caption>Set as an Object literal</caption>\n     * myJoystick.position = { x: 10, y: 20 };\n     *\n     * @type {Position}\n     */\n    this.position = { x: 0, y: 0 }\n    /**\n     * The radius of the Joystick. Sets the overall size, and therefore\n     * sensitivity. Smaller joysticks are more sensitive.\n     *\n     * @example\n     * myJoystick.radius = 10;\n     *\n     * @type {number}\n     */\n    this.radius = 10\n    /**\n     * Should the Joystick reset to zero output when a TouchEvent ends, or\n     * continue with the last value. Think of this as \"spring return\" in a\n     * physical Joystick.\n     *\n     * Defaults to `false`.\n     *\n     * @example\n     * myJoystick.sticky = true;\n     *\n     * @type {boolean}\n     */\n    this.sticky = false\n    /**\n     * Style to draw.\n     * @type {string}\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle\n     */\n    this.style = 'white'\n\n    /**\n     * *Output* - The horizontal value of the Joystick. This will be a value between\n     * -1.0 (full right) and 1.0 (full left). Idle in the center is 0.0.\n     *\n     * @example <caption>Get X value</caption>\n     * var myValueX = myJoystick.x;\n     *\n     * @type {!number}\n     */\n    this.x = 0\n\n    /**\n     * *Output* - The vertical value of the Joystick. This will be a value between\n     * -1.0 (full down) and 1.0 (full up). Idle in the center is 0.0.\n     *\n     * @example <caption>Get Y value</caption>\n     * var myValueY = myJoystick.y;\n     *\n     * @type {!number}\n     */\n    this.y = 0\n  }\n\n  /**\n   * Get Joystick dimensions.\n   *\n   * @protected\n   * @return {Map<string,number|string>} the dimension collection\n   * @property {!(number|string)} x - the x coordinate\n   * @property {!(number|string)} y - the y coordinate\n   * @property {!(number|string)} r - the radius\n   */\n  getDimensions () {\n    return { x: this.position.x, y: this.position.y, r: this.radius }\n  }\n\n  /**\n   * Is the specified touch inside the Joystick.\n   *\n   * This method is called by the framework, so need not be used directly.\n   *\n   * @override\n   * @protected\n   * @param {!TouchEvent} touch - the TouchEvent to test\n   * @return {boolean} - true if the control matches the event\n   */\n  matchesTouch (touch) {\n    const { clientX, clientY } = touch\n    const { x, y, r } = this.getPixelDimensions()\n\n    const dx = (x - clientX)\n    const dy = (y - clientY)\n    return Math.sqrt(dx * dx + dy * dy) <= r\n  }\n\n  /**\n   * A touch tracked by the Joystick has been updated. Updates the\n   * values of `x` and `y` outputs and handles sticky behavior.\n   *\n   * This method is called by the framework, so need not be used directly.\n   *\n   * @override\n   * @protected\n   * @param {?TouchEvent} touch - the TouchEvent to test\n   */\n  setTouch (touch) {\n    super.setTouch(touch)\n    if (touch) {\n      const { x, y, r } = this.getPixelDimensions()\n      this.x = constrain((x - touch.clientX) / r, -1.0, 1.0)\n      this.y = constrain((y - touch.clientY) / r, -1.0, 1.0)\n    } else if (!this.sticky) {\n      this.x = 0.0\n      this.y = 0.0\n    }\n  }\n\n  /**\n   * Draw the Joystick on the canvas.\n   *\n   * This method is called by the framework, so need not be used directly.\n   *\n   * @override\n   * @protected\n   * @param {!CanvasRenderingContext2D} ctx - the 2D drawing context\n   */\n  draw (ctx) {\n    const { x, y, r } = this.getPixelDimensions()\n    const ir = Math.round(r / 3)\n\n    ctx.beginPath()\n    ctx.strokeStyle = (this.touch && this.touchedStyle) || this.style\n    ctx.lineWidth = 5\n    ctx.arc(x, y, ir, 0, Math.PI * 2, true)\n    ctx.stroke()\n\n    ctx.beginPath()\n    ctx.strokeStyle = (this.touch && this.touchedStyle) || this.style\n    ctx.lineWidth = 2\n    ctx.arc(x, y, r, 0, Math.PI * 2, true)\n    ctx.stroke()\n\n    // paint the current touch //\n    ctx.beginPath()\n    ctx.strokeStyle = this.style\n    ctx.arc(x - this.x * r, y - this.y * r, ir, 0, Math.PI * 2, true)\n    ctx.stroke()\n\n    ctx.beginPath()\n    ctx.fillStyle = 'white'\n    ctx.fillText(\n      `${this.name}, x: ${this.x.toFixed(3)}, y: ${this.y.toFixed(3)}`,\n      x - 50, y + r + 15\n    )\n  }\n}\n",
    "static": true,
    "longname": "lib/controls/Joystick.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "class",
    "name": "Joystick",
    "memberof": "lib/controls/Joystick.js",
    "static": true,
    "longname": "lib/controls/Joystick.js~Joystick",
    "access": null,
    "export": true,
    "importPath": "combatbot-bot-client/lib/controls/Joystick.js",
    "importStyle": "Joystick",
    "description": "Joystick for two dimensional X-Y control.\n\nThis is the primary tool for controlling the robot. It functions just like a\nphysical joystick, giving readings in both the X and Y directions.",
    "examples": [
      "<caption>Setting Joystick parametes in 'setup()'</caption>\nvar myJoystick = new Joystick('leftStick');\nmyJoystick.position.x = 40;\nmyJoystick.position.y = 50;\nmyJoystick.radius = 15;",
      "<caption>Reading Joystick value in 'loop()'</caption>\nvar valueX = myJoystick.x;\nmyMotor.set(valueX);"
    ],
    "lineNumber": 20,
    "interface": false,
    "extends": [
      "lib/controls/Control.js~Control"
    ]
  },
  {
    "__docId__": 109,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/controls/Joystick.js~Joystick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/controls/Joystick.js~Joystick#constructor",
    "access": null,
    "description": "Constructor. Create a new Joystick and add it to the canvas.",
    "lineNumber": 28,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the joystick name"
      }
    ],
    "override": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "control already exists with specified name"
      }
    ]
  },
  {
    "__docId__": 110,
    "kind": "member",
    "name": "position",
    "memberof": "lib/controls/Joystick.js~Joystick",
    "static": false,
    "longname": "lib/controls/Joystick.js~Joystick#position",
    "access": null,
    "description": "The placement of the Joystick on the canvas. For dimension values,\nsee {@link ControlManager.convertToPixels}.",
    "examples": [
      "<caption>Set individually</caption>\nmyJoystick.position.x = 10;\nmyJoystick.position.y = 20;",
      "<caption>Set as an Object literal</caption>\nmyJoystick.position = { x: 10, y: 20 };"
    ],
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Position"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "radius",
    "memberof": "lib/controls/Joystick.js~Joystick",
    "static": false,
    "longname": "lib/controls/Joystick.js~Joystick#radius",
    "access": null,
    "description": "The radius of the Joystick. Sets the overall size, and therefore\nsensitivity. Smaller joysticks are more sensitive.",
    "examples": [
      "myJoystick.radius = 10;"
    ],
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "sticky",
    "memberof": "lib/controls/Joystick.js~Joystick",
    "static": false,
    "longname": "lib/controls/Joystick.js~Joystick#sticky",
    "access": null,
    "description": "Should the Joystick reset to zero output when a TouchEvent ends, or\ncontinue with the last value. Think of this as \"spring return\" in a\nphysical Joystick.\n\nDefaults to `false`.",
    "examples": [
      "myJoystick.sticky = true;"
    ],
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "style",
    "memberof": "lib/controls/Joystick.js~Joystick",
    "static": false,
    "longname": "lib/controls/Joystick.js~Joystick#style",
    "access": null,
    "description": "Style to draw.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle"
    ],
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "x",
    "memberof": "lib/controls/Joystick.js~Joystick",
    "static": false,
    "longname": "lib/controls/Joystick.js~Joystick#x",
    "access": null,
    "description": "*Output* - The horizontal value of the Joystick. This will be a value between\n-1.0 (full right) and 1.0 (full left). Idle in the center is 0.0.",
    "examples": [
      "<caption>Get X value</caption>\nvar myValueX = myJoystick.x;"
    ],
    "lineNumber": 83,
    "type": {
      "nullable": false,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "y",
    "memberof": "lib/controls/Joystick.js~Joystick",
    "static": false,
    "longname": "lib/controls/Joystick.js~Joystick#y",
    "access": null,
    "description": "*Output* - The vertical value of the Joystick. This will be a value between\n-1.0 (full down) and 1.0 (full up). Idle in the center is 0.0.",
    "examples": [
      "<caption>Get Y value</caption>\nvar myValueY = myJoystick.y;"
    ],
    "lineNumber": 94,
    "type": {
      "nullable": false,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "getDimensions",
    "memberof": "lib/controls/Joystick.js~Joystick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/controls/Joystick.js~Joystick#getDimensions",
    "access": "protected",
    "description": "Get Joystick dimensions.",
    "lineNumber": 106,
    "params": [],
    "properties": [
      {
        "nullable": false,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "the x coordinate"
      },
      {
        "nullable": false,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "the y coordinate"
      },
      {
        "nullable": false,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "the radius"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Map<string,number|string>"
      ],
      "spread": false,
      "description": "the dimension collection"
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "matchesTouch",
    "memberof": "lib/controls/Joystick.js~Joystick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/controls/Joystick.js~Joystick#matchesTouch",
    "access": "protected",
    "description": "Is the specified touch inside the Joystick.\n\nThis method is called by the framework, so need not be used directly.",
    "lineNumber": 120,
    "params": [
      {
        "nullable": false,
        "types": [
          "TouchEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "touch",
        "description": "the TouchEvent to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the control matches the event"
    },
    "override": true
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "setTouch",
    "memberof": "lib/controls/Joystick.js~Joystick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/controls/Joystick.js~Joystick#setTouch",
    "access": "protected",
    "description": "A touch tracked by the Joystick has been updated. Updates the\nvalues of `x` and `y` outputs and handles sticky behavior.\n\nThis method is called by the framework, so need not be used directly.",
    "lineNumber": 139,
    "params": [
      {
        "nullable": true,
        "types": [
          "TouchEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "touch",
        "description": "the TouchEvent to test"
      }
    ],
    "override": true
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "x",
    "memberof": "lib/controls/Joystick.js~Joystick",
    "static": false,
    "longname": "lib/controls/Joystick.js~Joystick#x",
    "access": null,
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "y",
    "memberof": "lib/controls/Joystick.js~Joystick",
    "static": false,
    "longname": "lib/controls/Joystick.js~Joystick#y",
    "access": null,
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "x",
    "memberof": "lib/controls/Joystick.js~Joystick",
    "static": false,
    "longname": "lib/controls/Joystick.js~Joystick#x",
    "access": null,
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "y",
    "memberof": "lib/controls/Joystick.js~Joystick",
    "static": false,
    "longname": "lib/controls/Joystick.js~Joystick#y",
    "access": null,
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "draw",
    "memberof": "lib/controls/Joystick.js~Joystick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/controls/Joystick.js~Joystick#draw",
    "access": "protected",
    "description": "Draw the Joystick on the canvas.\n\nThis method is called by the framework, so need not be used directly.",
    "lineNumber": 160,
    "params": [
      {
        "nullable": false,
        "types": [
          "CanvasRenderingContext2D"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "the 2D drawing context"
      }
    ],
    "override": true
  },
  {
    "__docId__": 124,
    "kind": "file",
    "name": "lib/controls/Slider.js",
    "content": "import Control from './Control'\nimport { constrain } from '../utils'\n\n/**\n * Slider for uni-dimensional control.\n *\n * Sliders can be oriented either vertically or horizontally by setting\n * the {@link Slider#type} property. The slider is defined by a reference\n * position, length and radius.\n *\n * ## Vertical Slider ##\n * For vertical sliders, the position is the center of the top half-circle.\n *\n * ```javascript\n * // not actually needed, this is the default mode\n * mySlider.type = Slider.VERTICAL;\n * mySlider.position.x = 20;\n * mySlider.position.y = 20;\n * mySlider.length = 60;\n * mySlider.radius = 10;\n * ```\n *\n * ## Horizonal Slider ##\n * For horizontal sliders, the position is the center of the left half-circle.\n *\n * ```javascript\n * mySlider.type = Slider.HORIZONTAL;\n * mySlider.position.x = 20;\n * mySlider.position.y = 20;\n * mySlider.length = 60;\n * mySlider.radius = 10;\n * ```\n */\nexport default class Slider extends Control {\n  /**\n   * Constructor. Create a new Slider and add it to the canvas.\n   *\n   * @override\n   * @param {!string} name - the slider name\n   * @throws {Error} control already exists with specified name\n   */\n  constructor (name) {\n    super(name)\n    /**\n     * The placement of the Slider on the canvas. For a HORIZONTAL Slider,\n     * this is the center of the left half-circle, for a VERTICAL Slider, this\n     * is the center of top half-circle.\n     *\n     * For dimension values, see {@link ControlManager.convertToPixels}.\n     *\n     * @example <caption>Set individually</caption>\n     * mySlider.position.x = 10;\n     * mySlider.position.y = 20;\n     *\n     * @example <caption>Set as an Object literal</caption>\n     * mySlider.position = { x: 10, y: 20 };\n     *\n     * @type {Position}\n     */\n    this.position = { x: 0, y: 0 }\n    /**\n     * The radius of the Slider arcs.\n     *\n     * @example\n     * mySlider.radius = 10;\n     *\n     * @type {number}\n     */\n    this.radius = 10\n    /**\n     * The length of the Slider. This is the distance between the centers\n     * of the two half-circles. It will be measured either vertically or\n     * horizontally based on the type of slider.\n     *\n     * @example\n     * mySlider.length = 60;\n     *\n     * @type {number}\n     */\n    this.length = 30\n    /**\n     * The type of slider. This must be equal to one of two constants, either\n     * `Slider.VERTICAL` or `Slider.HORIZONTAL`. These values are just strings\n     * of value 'Vertical' and 'Horizontal', respectively.\n     *\n     * @example\n     * mySlider.type = Slider.HORIZONTAL;\n     *\n     * @type {string}\n     */\n    this.type = Slider.VERTICAL\n    /**\n     * Should the slider remember its position when it is not being touched.\n     * Normally, this is the behavior you want for something like spinning-weapon\n     * power.\n     *\n     * Defaults to `true`.\n     *\n     * @type {boolean}\n     */\n    this.sticky = true\n    /**\n     * Style to draw.\n     * @type {string}\n     */\n    this.style = 'white'\n    // initial value //\n    this.value = 0\n  }\n\n  /**\n   * Get Slider dimensions.\n   *\n   * @protected\n   * @return {Map<string,number|string>} named dimension collection, in raw form\n   * @property {!(number|string)} x - the x coordinate of origin\n   * @property {!(number|string)} y - the y coordinate of origin\n   * @property {!(number|string)} r - the radius\n   */\n  getDimensions () {\n    return {\n      x: this.position.x,\n      y: this.position.y,\n      r: this.radius,\n      l: this.length\n    }\n  }\n\n  /**\n   * Helper method to return various pixel coordinates useful for both\n   * touch match detection and drawing. Values are in pixels.\n   *\n   * @private\n   * @return {Map<string,number|string>} named extended dimension collection, in pixels\n   * @property {!(number|string)} x - the x coordinate of origin arc\n   * @property {!(number|string)} x1 - left-most x coordinate rectangle\n   * @property {!(number|string)} x2 - right-most x coordinate rectangle\n   * @property {!(number|string)} xa - the x coordinate of the other arc\n   * @property {!(number|string)} y - the y coordinate of origin\n   * @property {!(number|string)} y1 - top-most y coordindate of rectangle\n   * @property {!(number|string)} y1 - bottom-most y coordindate of rectangle\n   * @property {!(number|string)} ya - the y coordinate of the other arc\n   * @property {!(number|string)} r - the radius\n   * @property {!{number|string}} l - the length\n   */\n  getHelperDimensions () {\n    const { x, y, r, l } = this.getPixelDimensions()\n    if (this.type === Slider.HORIZONTAL) {\n      return {\n        x,\n        x1: x,\n        x2: x + l,\n        xa: x + l,\n        y,\n        y1: y - r,\n        y2: y + r,\n        ya: y,\n        r,\n        l\n      }\n    } else {\n      return {\n        x,\n        x1: x - r,\n        x2: x + r,\n        xa: x,\n        y,\n        y1: y,\n        y2: y + l,\n        ya: y + l,\n        r,\n        l\n      }\n    }\n  }\n\n  /**\n   * Is the specified touch inside the Slider.\n   *\n   * This method is called by the framework, so need not be used directly.\n   *\n   * @override\n   * @protected\n   * @param {!TouchEvent} touch - the TouchEvent to test\n   * @return {boolean} - true if the control matches the event\n   */\n  matchesTouch (touch) {\n    const { clientX, clientY } = touch\n    const { x, y, r, x1, y1, x2, y2, xa, ya } = this.getHelperDimensions()\n\n    // check if in the end circles //\n    const dx = (x - clientX)\n    const dy = (y - clientY)\n    if (Math.sqrt(dx * dx + dy * dy) <= r) return true\n    const dxa = (xa - clientX)\n    const dya = (ya - clientY)\n    if (Math.sqrt(dxa * dxa + dya * dya) <= r) return true\n\n    // check if in the rectangle //\n    return (clientX >= x1) && (clientX <= x2) && (clientY >= y1) && (clientY <= y2)\n  }\n\n  /**\n   * A touch tracked by this Slider has been updated. Updates the slider\n   * value.\n   *\n   * This method is called by the framework, so need not be used directly.\n   *\n   * @override\n   * @protected\n   * @param {?TouchEvent} touch - the TouchEvent to test\n   */\n  setTouch (touch) {\n    super.setTouch(touch)\n    if (touch) {\n      const { l, xa, ya } = this.getHelperDimensions()\n      if (this.type === Slider.HORIZONTAL) {\n        this.value = constrain((xa - touch.clientX) / l, 0.0, 1.0)\n      } else {\n        this.value = constrain((ya - touch.clientY) / l, 0.0, 1.0)\n      }\n    } else if (!this.sticky) {\n      this.value = 0\n    }\n  }\n\n  /**\n   * Draw the Slider on the canvas.\n   *\n   * This method is called by the framework, so need not be used directly.\n   *\n   * @protected\n   * @param {!CanvasRenderingContext2D} ctx - the 2D drawing context\n   */\n  draw (ctx) {\n    const { x, y, r, l, x1, y1, x2, y2, xa, ya } = this.getHelperDimensions()\n\n    ctx.beginPath()\n    ctx.strokeStyle = this.style\n    ctx.lineWidth = 2\n    if (this.type === Slider.HORIZONTAL) {\n      ctx.moveTo(x1, y1)\n      ctx.lineTo(x2, y1)\n      ctx.arc(xa, ya, r, Math.PI * 3 / 2, Math.PI / 2, false)\n      ctx.moveTo(x2, y2)\n      ctx.lineTo(x1, y2)\n      ctx.arc(x, y, r, Math.PI / 2, Math.PI * 3 / 2, false)\n    } else {\n      ctx.arc(x, y, r, Math.PI, Math.PI * 2, false)\n      ctx.moveTo(x2, y1)\n      ctx.lineTo(x2, y2)\n      ctx.arc(xa, ya, r, 0, Math.PI, false)\n      ctx.moveTo(x1, y2)\n      ctx.lineTo(x1, y1)\n    }\n    ctx.stroke()\n\n    // paint the current value //\n    ctx.beginPath()\n    if (this.type === Slider.HORIZONTAL) {\n      ctx.arc(xa - (this.value * l), y, r - 4, 0, Math.PI * 2, true)\n    } else {\n      ctx.arc(x, ya - (this.value * l), r - 4, 0, Math.PI * 2, true)\n    }\n    ctx.strokeStyle = this.style\n    ctx.stroke()\n\n    // paint debug text //\n    ctx.beginPath()\n    ctx.fillStyle = 'white'\n    ctx.fillText(\n      `${this.name}, value: ${this.value.toFixed(3)}`,\n      xa - 50, ya + r + 15\n    )\n  }\n}\nSlider.HORIZONTAL = 'Horizontal'\nSlider.VERTICAL = 'Vertical'\n",
    "static": true,
    "longname": "lib/controls/Slider.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 125,
    "kind": "class",
    "name": "Slider",
    "memberof": "lib/controls/Slider.js",
    "static": true,
    "longname": "lib/controls/Slider.js~Slider",
    "access": null,
    "export": true,
    "importPath": "combatbot-bot-client/lib/controls/Slider.js",
    "importStyle": "Slider",
    "description": "Slider for uni-dimensional control.\n\nSliders can be oriented either vertically or horizontally by setting\nthe {@link Slider#type} property. The slider is defined by a reference\nposition, length and radius.\n\n## Vertical Slider ##\nFor vertical sliders, the position is the center of the top half-circle.\n\n```javascript\n// not actually needed, this is the default mode\nmySlider.type = Slider.VERTICAL;\nmySlider.position.x = 20;\nmySlider.position.y = 20;\nmySlider.length = 60;\nmySlider.radius = 10;\n```\n\n## Horizonal Slider ##\nFor horizontal sliders, the position is the center of the left half-circle.\n\n```javascript\nmySlider.type = Slider.HORIZONTAL;\nmySlider.position.x = 20;\nmySlider.position.y = 20;\nmySlider.length = 60;\nmySlider.radius = 10;\n```",
    "lineNumber": 34,
    "interface": false,
    "extends": [
      "lib/controls/Control.js~Control"
    ]
  },
  {
    "__docId__": 126,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/controls/Slider.js~Slider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/controls/Slider.js~Slider#constructor",
    "access": null,
    "description": "Constructor. Create a new Slider and add it to the canvas.",
    "lineNumber": 42,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the slider name"
      }
    ],
    "override": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "control already exists with specified name"
      }
    ]
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "position",
    "memberof": "lib/controls/Slider.js~Slider",
    "static": false,
    "longname": "lib/controls/Slider.js~Slider#position",
    "access": null,
    "description": "The placement of the Slider on the canvas. For a HORIZONTAL Slider,\nthis is the center of the left half-circle, for a VERTICAL Slider, this\nis the center of top half-circle.\n\nFor dimension values, see {@link ControlManager.convertToPixels}.",
    "examples": [
      "<caption>Set individually</caption>\nmySlider.position.x = 10;\nmySlider.position.y = 20;",
      "<caption>Set as an Object literal</caption>\nmySlider.position = { x: 10, y: 20 };"
    ],
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "Position"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "radius",
    "memberof": "lib/controls/Slider.js~Slider",
    "static": false,
    "longname": "lib/controls/Slider.js~Slider#radius",
    "access": null,
    "description": "The radius of the Slider arcs.",
    "examples": [
      "mySlider.radius = 10;"
    ],
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "length",
    "memberof": "lib/controls/Slider.js~Slider",
    "static": false,
    "longname": "lib/controls/Slider.js~Slider#length",
    "access": null,
    "description": "The length of the Slider. This is the distance between the centers\nof the two half-circles. It will be measured either vertically or\nhorizontally based on the type of slider.",
    "examples": [
      "mySlider.length = 60;"
    ],
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "type",
    "memberof": "lib/controls/Slider.js~Slider",
    "static": false,
    "longname": "lib/controls/Slider.js~Slider#type",
    "access": null,
    "description": "The type of slider. This must be equal to one of two constants, either\n`Slider.VERTICAL` or `Slider.HORIZONTAL`. These values are just strings\nof value 'Vertical' and 'Horizontal', respectively.",
    "examples": [
      "mySlider.type = Slider.HORIZONTAL;"
    ],
    "lineNumber": 91,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "sticky",
    "memberof": "lib/controls/Slider.js~Slider",
    "static": false,
    "longname": "lib/controls/Slider.js~Slider#sticky",
    "access": null,
    "description": "Should the slider remember its position when it is not being touched.\nNormally, this is the behavior you want for something like spinning-weapon\npower.\n\nDefaults to `true`.",
    "lineNumber": 101,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "style",
    "memberof": "lib/controls/Slider.js~Slider",
    "static": false,
    "longname": "lib/controls/Slider.js~Slider#style",
    "access": null,
    "description": "Style to draw.",
    "lineNumber": 106,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "value",
    "memberof": "lib/controls/Slider.js~Slider",
    "static": false,
    "longname": "lib/controls/Slider.js~Slider#value",
    "access": null,
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "getDimensions",
    "memberof": "lib/controls/Slider.js~Slider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/controls/Slider.js~Slider#getDimensions",
    "access": "protected",
    "description": "Get Slider dimensions.",
    "lineNumber": 120,
    "params": [],
    "properties": [
      {
        "nullable": false,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "the x coordinate of origin"
      },
      {
        "nullable": false,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "the y coordinate of origin"
      },
      {
        "nullable": false,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "the radius"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Map<string,number|string>"
      ],
      "spread": false,
      "description": "named dimension collection, in raw form"
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "getHelperDimensions",
    "memberof": "lib/controls/Slider.js~Slider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/controls/Slider.js~Slider#getHelperDimensions",
    "access": "private",
    "description": "Helper method to return various pixel coordinates useful for both\ntouch match detection and drawing. Values are in pixels.",
    "lineNumber": 146,
    "params": [],
    "properties": [
      {
        "nullable": false,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "the x coordinate of origin arc"
      },
      {
        "nullable": false,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": "left-most x coordinate rectangle"
      },
      {
        "nullable": false,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": "right-most x coordinate rectangle"
      },
      {
        "nullable": false,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "xa",
        "description": "the x coordinate of the other arc"
      },
      {
        "nullable": false,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "the y coordinate of origin"
      },
      {
        "nullable": false,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "y1",
        "description": "top-most y coordindate of rectangle"
      },
      {
        "nullable": false,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "y1",
        "description": "bottom-most y coordindate of rectangle"
      },
      {
        "nullable": false,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "ya",
        "description": "the y coordinate of the other arc"
      },
      {
        "nullable": false,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "the radius"
      },
      {
        "nullable": false,
        "types": [
          "{number|string}"
        ],
        "spread": false,
        "optional": false,
        "name": "l",
        "description": "the length"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Map<string,number|string>"
      ],
      "spread": false,
      "description": "named extended dimension collection, in pixels"
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "matchesTouch",
    "memberof": "lib/controls/Slider.js~Slider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/controls/Slider.js~Slider#matchesTouch",
    "access": "protected",
    "description": "Is the specified touch inside the Slider.\n\nThis method is called by the framework, so need not be used directly.",
    "lineNumber": 187,
    "params": [
      {
        "nullable": false,
        "types": [
          "TouchEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "touch",
        "description": "the TouchEvent to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the control matches the event"
    },
    "override": true
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "setTouch",
    "memberof": "lib/controls/Slider.js~Slider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/controls/Slider.js~Slider#setTouch",
    "access": "protected",
    "description": "A touch tracked by this Slider has been updated. Updates the slider\nvalue.\n\nThis method is called by the framework, so need not be used directly.",
    "lineNumber": 213,
    "params": [
      {
        "nullable": true,
        "types": [
          "TouchEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "touch",
        "description": "the TouchEvent to test"
      }
    ],
    "override": true
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "value",
    "memberof": "lib/controls/Slider.js~Slider",
    "static": false,
    "longname": "lib/controls/Slider.js~Slider#value",
    "access": null,
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "value",
    "memberof": "lib/controls/Slider.js~Slider",
    "static": false,
    "longname": "lib/controls/Slider.js~Slider#value",
    "access": null,
    "description": null,
    "lineNumber": 220,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "value",
    "memberof": "lib/controls/Slider.js~Slider",
    "static": false,
    "longname": "lib/controls/Slider.js~Slider#value",
    "access": null,
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "draw",
    "memberof": "lib/controls/Slider.js~Slider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/controls/Slider.js~Slider#draw",
    "access": "protected",
    "description": "Draw the Slider on the canvas.\n\nThis method is called by the framework, so need not be used directly.",
    "lineNumber": 235,
    "params": [
      {
        "nullable": false,
        "types": [
          "CanvasRenderingContext2D"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "the 2D drawing context"
      }
    ]
  },
  {
    "__docId__": 142,
    "kind": "file",
    "name": "lib/controls/index.js",
    "content": "// re-export the individual modules //\nexport { default as ControlManager } from './ControlManager'\nexport { default as Control } from './Control'\nexport { default as Joystick } from './Joystick'\nexport { default as Button } from './Button'\nexport { default as Slider } from './Slider'\n",
    "static": true,
    "longname": "lib/controls/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "lib/drive/ArcadeDrive.js",
    "content": "import TwoWheelDrive from './TwoWheelDrive'\nimport { constrain } from '../utils'\n\n/**\n *  'Arcade' drive with separate control of speed and rotation. This class\n *  uses the classic FIRST Robotics control mixing scheme.\n *\n *  This style is easier to learn for novice drivers, but can offer less nuanced\n *  control, especially when attempting to make radiused turns.\n */\nexport default class ArcadeDrive extends TwoWheelDrive {\n  /**\n   * Set speed and rotation.\n   * FIXME: put notes about directionality\n   *\n   * @param {number} speed forward/reverse speed [-1.0, 1.0]\n   * @param {number} rotation left/right turning speed [-1.0, 1.0]\n   */\n  setSpeedAndRotation (speed, rotation) {\n    // clamp the inputs //\n    speed = constrain(speed, -1.0, 1.0)\n    if (this.speedScalar) {\n      speed = this.speedScalar.scale(speed)\n    }\n    rotation = constrain(rotation, -1.0, 1.0)\n    if (this.rotationScalar) {\n      rotation = this.rotationScalar.scale(rotation)\n    }\n\n    // mix speed and rotation signals //\n    let leftPower, rightPower\n    if (speed > 0.0) {\n      if (rotation > 0.0) {\n        leftPower = speed - rotation\n        rightPower = Math.max(speed, rotation)\n      } else {\n        leftPower = Math.max(speed, -rotation)\n        rightPower = speed + rotation\n      }\n    } else {\n      if (rotation > 0.0) {\n        leftPower = -Math.max(-speed, rotation)\n        rightPower = speed + rotation\n      } else {\n        leftPower = speed - rotation\n        rightPower = -Math.max(-speed, -rotation)\n      }\n    }\n\n    this.setMotorPowers(leftPower, rightPower)\n  }\n}\n",
    "static": true,
    "longname": "lib/drive/ArcadeDrive.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "class",
    "name": "ArcadeDrive",
    "memberof": "lib/drive/ArcadeDrive.js",
    "static": true,
    "longname": "lib/drive/ArcadeDrive.js~ArcadeDrive",
    "access": null,
    "export": true,
    "importPath": "combatbot-bot-client/lib/drive/ArcadeDrive.js",
    "importStyle": "ArcadeDrive",
    "description": " 'Arcade' drive with separate control of speed and rotation. This class\n uses the classic FIRST Robotics control mixing scheme.\n\n This style is easier to learn for novice drivers, but can offer less nuanced\n control, especially when attempting to make radiused turns.",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "lib/drive/TwoWheelDrive.js~TwoWheelDrive"
    ]
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "setSpeedAndRotation",
    "memberof": "lib/drive/ArcadeDrive.js~ArcadeDrive",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/drive/ArcadeDrive.js~ArcadeDrive#setSpeedAndRotation",
    "access": null,
    "description": "Set speed and rotation.\nFIXME: put notes about directionality",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "speed",
        "description": "forward/reverse speed [-1.0, 1.0]"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "rotation",
        "description": "left/right turning speed [-1.0, 1.0]"
      }
    ]
  },
  {
    "__docId__": 146,
    "kind": "file",
    "name": "lib/drive/TankDrive.js",
    "content": "import TwoWheelDrive from './TwoWheelDrive'\n\n/**\n *  Differential 'tank' style drive where left and right wheels\n *  are controlled independently.\n *\n *  This style is harder to learn, but can offer superior control,\n *  since it is easier to steer in curves without slowing down.\n */\nexport default class TankDrive extends TwoWheelDrive {\n  /**\n   *  Set left and right wheel speeds independently.\n   *\n   *  @param {number} left wheel speed [-1.0, 1.0]\n   *  @param {number} right wheel speed [-1.0, 1.0]\n   */\n  setLeftAndRightSpeed (left, right) {\n    this.setMotorPowers(left, right)\n  }\n}\n",
    "static": true,
    "longname": "lib/drive/TankDrive.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 147,
    "kind": "class",
    "name": "TankDrive",
    "memberof": "lib/drive/TankDrive.js",
    "static": true,
    "longname": "lib/drive/TankDrive.js~TankDrive",
    "access": null,
    "export": true,
    "importPath": "combatbot-bot-client/lib/drive/TankDrive.js",
    "importStyle": "TankDrive",
    "description": " Differential 'tank' style drive where left and right wheels\n are controlled independently.\n\n This style is harder to learn, but can offer superior control,\n since it is easier to steer in curves without slowing down.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "lib/drive/TwoWheelDrive.js~TwoWheelDrive"
    ]
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "setLeftAndRightSpeed",
    "memberof": "lib/drive/TankDrive.js~TankDrive",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/drive/TankDrive.js~TankDrive#setLeftAndRightSpeed",
    "access": null,
    "description": " Set left and right wheel speeds independently.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "left",
        "description": "wheel speed [-1.0, 1.0]"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "right",
        "description": "wheel speed [-1.0, 1.0]"
      }
    ]
  },
  {
    "__docId__": 149,
    "kind": "file",
    "name": "lib/drive/TwoWheelDrive.js",
    "content": "import { constrain } from '../utils'\nimport { Motor } from '../hardware'\n\n/**\n * Base class for a two wheel robot.\n *\n * Motors named 'leftMotor' and 'rightMotor' are automatically created if no\n * motors are specified. These devices must be configured in the hardware setup.\n */\nexport default class TwoWheelDrive {\n  /**\n   * Constructor.\n   *\n   * @param {string|Motor} [leftMotor = 'leftMotor'] the left motor or device name\n   * @param {string|Motor} [rightMotor = 'rightMotor'] the right motor or device name\n   */\n  constructor (leftMotor, rightMotor) {\n    const getMotor = (motor) =>\n      typeof motor === 'string' ? new Motor(motor) : motor\n    /**\n     * @private\n     * @type {Array<Motor>}\n     */\n    this.motors = [\n      getMotor(leftMotor) || new Motor('leftMotor'),\n      getMotor(rightMotor) || new Motor('rightMotor')\n    ]\n    /**\n     * Swap the left and right motors.\n     * @type {boolean}\n     */\n    this.swapMotors = false\n  }\n\n  /**\n   * Get the logical left motor, i.e. after swapMotors is applied.\n   * @type {Motor}\n   */\n  get leftMotor () {\n    return this.motors[this.swapMotors ? 1 : 0]\n  }\n  /**\n   * Get the logical left motor, i.e. after swapMotors is applied.\n   * @type {Motor}\n   */\n  get rightMotor () {\n    return this.motors[this.swapMotors ? 0 : 1]\n  }\n\n  /**\n   * Set the left and right motor powers. Values are constrained\n   * to between -1.0 (full reverse) and 1.0 (full forward). A value of 0\n   * is stopped. See {@link Motor#set}\n   *\n   * @param {number} left - the left motor power\n   * @param {number} right - the right motor power\n   */\n  setMotorPowers (left, right) {\n    this.leftMotor.set(constrain(left || 0, -1.0, 1.0))\n    this.rightMotor.set(constrain(right || 0, -1.0, 1.0))\n  }\n\n  /**\n   * Stop both motors, this is equivalent to calling:\n   * ```javascript\n   * myMotor.setMotorPowers(0, 0);\n   * ```\n   */\n  stop () {\n    this.leftMotor.set(0)\n    this.rightMotor.set(0)\n  }\n}\n",
    "static": true,
    "longname": "lib/drive/TwoWheelDrive.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 150,
    "kind": "class",
    "name": "TwoWheelDrive",
    "memberof": "lib/drive/TwoWheelDrive.js",
    "static": true,
    "longname": "lib/drive/TwoWheelDrive.js~TwoWheelDrive",
    "access": null,
    "export": true,
    "importPath": "combatbot-bot-client/lib/drive/TwoWheelDrive.js",
    "importStyle": "TwoWheelDrive",
    "description": "Base class for a two wheel robot.\n\nMotors named 'leftMotor' and 'rightMotor' are automatically created if no\nmotors are specified. These devices must be configured in the hardware setup.",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 151,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/drive/TwoWheelDrive.js~TwoWheelDrive",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/drive/TwoWheelDrive.js~TwoWheelDrive#constructor",
    "access": null,
    "description": "Constructor.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Motor"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " 'leftMotor'",
        "defaultRaw": " 'leftMotor'",
        "name": "leftMotor",
        "description": "the left motor or device name"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Motor"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " 'rightMotor'",
        "defaultRaw": " 'rightMotor'",
        "name": "rightMotor",
        "description": "the right motor or device name"
      }
    ]
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "motors",
    "memberof": "lib/drive/TwoWheelDrive.js~TwoWheelDrive",
    "static": false,
    "longname": "lib/drive/TwoWheelDrive.js~TwoWheelDrive#motors",
    "access": "private",
    "description": "",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Array<Motor>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 153,
    "kind": "member",
    "name": "swapMotors",
    "memberof": "lib/drive/TwoWheelDrive.js~TwoWheelDrive",
    "static": false,
    "longname": "lib/drive/TwoWheelDrive.js~TwoWheelDrive#swapMotors",
    "access": null,
    "description": "Swap the left and right motors.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 154,
    "kind": "get",
    "name": "leftMotor",
    "memberof": "lib/drive/TwoWheelDrive.js~TwoWheelDrive",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/drive/TwoWheelDrive.js~TwoWheelDrive#leftMotor",
    "access": null,
    "description": "Get the logical left motor, i.e. after swapMotors is applied.",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Motor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 155,
    "kind": "get",
    "name": "rightMotor",
    "memberof": "lib/drive/TwoWheelDrive.js~TwoWheelDrive",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/drive/TwoWheelDrive.js~TwoWheelDrive#rightMotor",
    "access": null,
    "description": "Get the logical left motor, i.e. after swapMotors is applied.",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "Motor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "setMotorPowers",
    "memberof": "lib/drive/TwoWheelDrive.js~TwoWheelDrive",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/drive/TwoWheelDrive.js~TwoWheelDrive#setMotorPowers",
    "access": null,
    "description": "Set the left and right motor powers. Values are constrained\nto between -1.0 (full reverse) and 1.0 (full forward). A value of 0\nis stopped. See {@link Motor#set}",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "left",
        "description": "the left motor power"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "right",
        "description": "the right motor power"
      }
    ]
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "stop",
    "memberof": "lib/drive/TwoWheelDrive.js~TwoWheelDrive",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/drive/TwoWheelDrive.js~TwoWheelDrive#stop",
    "access": null,
    "description": "Stop both motors, this is equivalent to calling:\n```javascript\nmyMotor.setMotorPowers(0, 0);\n```",
    "lineNumber": 69,
    "params": []
  },
  {
    "__docId__": 158,
    "kind": "file",
    "name": "lib/drive/index.js",
    "content": "// re-export the individual modules //\nexport { default as TwoWheelDrive } from './TwoWheelDrive'\nexport { default as ArcadeDrive } from './ArcadeDrive'\nexport { default as TankDrive } from './TankDrive'\n",
    "static": true,
    "longname": "lib/drive/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 159,
    "kind": "file",
    "name": "lib/hardware/Device.js",
    "content": "import HardwareManager from './HardwareManager'\n\n/**\n * Abstract base class for virtual devices.\n *\n * Extend this class to implement your own virtual devices.\n * In most code, this will not be needed.\n */\nexport default class Device {\n  /**\n   * Constructor\n   * @param {string} name - name of the device\n   */\n  constructor (name) {\n    /**\n     * @type {string}\n     */\n    this.name = name\n    /**\n     * @private\n     * @type {number}\n     */\n    this.value = 0\n    HardwareManager.registerDevice(this)\n  }\n\n  /**\n   *  Sets the value of this Device. Only used for output Devices.\n   *  Calling this on input devices does nothing.\n   *\n   *  @param {number} value - the value to set.\n   */\n  set (value) {\n    this.value = value\n  }\n\n  /**\n   * Get the value of the device.\n   *\n   * For output devices, this reads back the last call to 'set()', for\n   * input devices, it returns the last value read from the controller.\n   *\n   * @return {number} current value of the device\n   */\n  get () {\n    return this.value\n  }\n\n  /**\n   * Gets the processed value of this Device in a form suitable\n   * for sending to the robot firmware. This will generally not be as\n   * a floating point number like in the framework.\n   *\n   * @abstract\n   * @protected\n   * @return {string} the translated value of the Device\n   */\n  getOutput () {\n    return null\n  }\n\n  /**\n   * Tests whether a device supports the specified driver.\n   *\n   * @protected\n   * @param {string} driverName - name of the proposed driver for this device\n   * @return {boolean} true if the Device supports this driver\n   */\n  supportsDriver (driverName) {\n    return false\n  }\n}\n",
    "static": true,
    "longname": "lib/hardware/Device.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 160,
    "kind": "class",
    "name": "Device",
    "memberof": "lib/hardware/Device.js",
    "static": true,
    "longname": "lib/hardware/Device.js~Device",
    "access": null,
    "export": true,
    "importPath": "combatbot-bot-client/lib/hardware/Device.js",
    "importStyle": "Device",
    "description": "Abstract base class for virtual devices.\n\nExtend this class to implement your own virtual devices.\nIn most code, this will not be needed.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 161,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/hardware/Device.js~Device",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/hardware/Device.js~Device#constructor",
    "access": null,
    "description": "Constructor",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the device"
      }
    ]
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "name",
    "memberof": "lib/hardware/Device.js~Device",
    "static": false,
    "longname": "lib/hardware/Device.js~Device#name",
    "access": null,
    "description": "",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "value",
    "memberof": "lib/hardware/Device.js~Device",
    "static": false,
    "longname": "lib/hardware/Device.js~Device#value",
    "access": "private",
    "description": "",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "set",
    "memberof": "lib/hardware/Device.js~Device",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/hardware/Device.js~Device#set",
    "access": null,
    "description": " Sets the value of this Device. Only used for output Devices.\n Calling this on input devices does nothing.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the value to set."
      }
    ]
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "value",
    "memberof": "lib/hardware/Device.js~Device",
    "static": false,
    "longname": "lib/hardware/Device.js~Device#value",
    "access": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "get",
    "memberof": "lib/hardware/Device.js~Device",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/hardware/Device.js~Device#get",
    "access": null,
    "description": "Get the value of the device.\n\nFor output devices, this reads back the last call to 'set()', for\ninput devices, it returns the last value read from the controller.",
    "lineNumber": 45,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "current value of the device"
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "getOutput",
    "memberof": "lib/hardware/Device.js~Device",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/hardware/Device.js~Device#getOutput",
    "access": "protected",
    "description": "Gets the processed value of this Device in a form suitable\nfor sending to the robot firmware. This will generally not be as\na floating point number like in the framework.",
    "lineNumber": 58,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the translated value of the Device"
    },
    "abstract": true
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "supportsDriver",
    "memberof": "lib/hardware/Device.js~Device",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/hardware/Device.js~Device#supportsDriver",
    "access": "protected",
    "description": "Tests whether a device supports the specified driver.",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "driverName",
        "description": "name of the proposed driver for this device"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the Device supports this driver"
    }
  },
  {
    "__docId__": 169,
    "kind": "file",
    "name": "lib/hardware/DigitalInput.js",
    "content": "import Device from './Device'\n\n/**\n * Digital Input\n *\n * A digital input device, such as an input pin. This can be connected\n * to a switch, bump sensor, line follower or other digital device.\n */\nexport default class DigitalInput extends Device {\n  /**\n   * Constructor\n   *\n   * @param {string} name - name of the digital input\n   */\n  constructor (name) {\n    super(name)\n    /**\n     * The value of the input.\n     * @private\n     * @type {boolean}\n     */\n    this.value = false\n  }\n\n  /**\n   * Get the value of the input as a boolean (true or false).\n   *\n   * @return {boolean} the value of the input\n   */\n  get () {\n    return this.value\n  }\n\n  /**\n   * Called by the framework to set the value of this input after\n   * it is received from the robot.\n   *\n   * @override\n   * @protected\n   * @param {number} value - the value to set\n   */\n  setInput (value) {\n    this.value = !!value\n  }\n\n  /**\n   * Does the input support a specified driver.\n   *\n   * Digital inputs currently support the following drivers:\n   *\n   *  - DIGITAL_IN : an input pin\n   *\n   * @private\n   * @param {string} driverName - name of the proposed driver\n   * @return {boolean} true if the DigitalInput supports the specified driver.\n   */\n  supportsDriver (driverName) {\n    return [ 'DIGITAL_IN' ].indexOf(driverName) !== -1\n  }\n}\n",
    "static": true,
    "longname": "lib/hardware/DigitalInput.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 170,
    "kind": "class",
    "name": "DigitalInput",
    "memberof": "lib/hardware/DigitalInput.js",
    "static": true,
    "longname": "lib/hardware/DigitalInput.js~DigitalInput",
    "access": null,
    "export": true,
    "importPath": "combatbot-bot-client/lib/hardware/DigitalInput.js",
    "importStyle": "DigitalInput",
    "description": "Digital Input\n\nA digital input device, such as an input pin. This can be connected\nto a switch, bump sensor, line follower or other digital device.",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "lib/hardware/Device.js~Device"
    ]
  },
  {
    "__docId__": 171,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/hardware/DigitalInput.js~DigitalInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/hardware/DigitalInput.js~DigitalInput#constructor",
    "access": null,
    "description": "Constructor",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the digital input"
      }
    ]
  },
  {
    "__docId__": 172,
    "kind": "member",
    "name": "value",
    "memberof": "lib/hardware/DigitalInput.js~DigitalInput",
    "static": false,
    "longname": "lib/hardware/DigitalInput.js~DigitalInput#value",
    "access": "private",
    "description": "The value of the input.",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "get",
    "memberof": "lib/hardware/DigitalInput.js~DigitalInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/hardware/DigitalInput.js~DigitalInput#get",
    "access": null,
    "description": "Get the value of the input as a boolean (true or false).",
    "lineNumber": 30,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "the value of the input"
    }
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "setInput",
    "memberof": "lib/hardware/DigitalInput.js~DigitalInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/hardware/DigitalInput.js~DigitalInput#setInput",
    "access": "protected",
    "description": "Called by the framework to set the value of this input after\nit is received from the robot.",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the value to set"
      }
    ],
    "override": true
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "value",
    "memberof": "lib/hardware/DigitalInput.js~DigitalInput",
    "static": false,
    "longname": "lib/hardware/DigitalInput.js~DigitalInput#value",
    "access": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "supportsDriver",
    "memberof": "lib/hardware/DigitalInput.js~DigitalInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/hardware/DigitalInput.js~DigitalInput#supportsDriver",
    "access": "private",
    "description": "Does the input support a specified driver.\n\nDigital inputs currently support the following drivers:\n\n - DIGITAL_IN : an input pin",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "driverName",
        "description": "name of the proposed driver"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the DigitalInput supports the specified driver."
    }
  },
  {
    "__docId__": 177,
    "kind": "file",
    "name": "lib/hardware/DigitalOutput.js",
    "content": "import Device from './Device'\n\n/**\n * Digital Output\n *\n * A digital output device that turns a device connected to\n * a pin, such as an LED, on and off.\n */\nexport default class DigitalOutput extends Device {\n  /**\n   * Constructor\n   *\n   * @param {string} name - name of the digital output\n   */\n  constructor (name) {\n    super(name)\n    /**\n     * Is the output pin inverted.\n     *\n     * Defaults to `false`.\n     * @type {boolean}\n     */\n    this.inverted = false\n    this.set(false)\n  }\n\n  /**\n   * Set the value of the output. Any 'falsy' value (false, 0, null, etc.)\n   * will translate to an output of LOW. Any other value will translate to\n   * an output of HIGH.\n   *\n   * @param {number} [value=0] - the digital output value\n   */\n  set (value) {\n    super.set(!!value ^ this.reversed ? 1 : 0)\n  }\n\n  /**\n   * Returns the output. This will be either the string '1' or '0'.\n   *\n   * @override\n   * @protected\n   * @return {string} the output value\n   */\n  getOutput () {\n    return this.get().toString()\n  }\n\n  /**\n   * Does the output support a specified driver.\n   *\n   * Digital outputs currently support the following drivers:\n   *\n   *  - DIGITAL_OUT : an output pin\n   *\n   * @private\n   * @param {string} driverName - name of the proposed driver\n   * @return {boolean} true if the DigitalOutput supports the specified driver.\n   */\n  supportsDriver (driverName) {\n    return [ 'DIGITAL_OUT' ].indexOf(driverName) !== -1\n  }\n}\n",
    "static": true,
    "longname": "lib/hardware/DigitalOutput.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 178,
    "kind": "class",
    "name": "DigitalOutput",
    "memberof": "lib/hardware/DigitalOutput.js",
    "static": true,
    "longname": "lib/hardware/DigitalOutput.js~DigitalOutput",
    "access": null,
    "export": true,
    "importPath": "combatbot-bot-client/lib/hardware/DigitalOutput.js",
    "importStyle": "DigitalOutput",
    "description": "Digital Output\n\nA digital output device that turns a device connected to\na pin, such as an LED, on and off.",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "lib/hardware/Device.js~Device"
    ]
  },
  {
    "__docId__": 179,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/hardware/DigitalOutput.js~DigitalOutput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/hardware/DigitalOutput.js~DigitalOutput#constructor",
    "access": null,
    "description": "Constructor",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the digital output"
      }
    ]
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "inverted",
    "memberof": "lib/hardware/DigitalOutput.js~DigitalOutput",
    "static": false,
    "longname": "lib/hardware/DigitalOutput.js~DigitalOutput#inverted",
    "access": null,
    "description": "Is the output pin inverted.\n\nDefaults to `false`.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "set",
    "memberof": "lib/hardware/DigitalOutput.js~DigitalOutput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/hardware/DigitalOutput.js~DigitalOutput#set",
    "access": null,
    "description": "Set the value of the output. Any 'falsy' value (false, 0, null, etc.)\nwill translate to an output of LOW. Any other value will translate to\nan output of HIGH.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "value",
        "description": "the digital output value"
      }
    ]
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "getOutput",
    "memberof": "lib/hardware/DigitalOutput.js~DigitalOutput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/hardware/DigitalOutput.js~DigitalOutput#getOutput",
    "access": "protected",
    "description": "Returns the output. This will be either the string '1' or '0'.",
    "lineNumber": 45,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the output value"
    },
    "override": true
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "supportsDriver",
    "memberof": "lib/hardware/DigitalOutput.js~DigitalOutput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/hardware/DigitalOutput.js~DigitalOutput#supportsDriver",
    "access": "private",
    "description": "Does the output support a specified driver.\n\nDigital outputs currently support the following drivers:\n\n - DIGITAL_OUT : an output pin",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "driverName",
        "description": "name of the proposed driver"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the DigitalOutput supports the specified driver."
    }
  },
  {
    "__docId__": 184,
    "kind": "file",
    "name": "lib/hardware/HardwareManager.js",
    "content": "// state variables //\nconst _devices = { }\nlet _config = null\n\n/**\n * Manages the virtual hardware layer, allowing uses to send commands to\n * the robot or receive sensor values from the robot by manipulating hardware\n * interface objects.\n *\n * The class is part of the core framework infrastructure and should not be\n * needed in your code under most circumstances.\n *\n * @protected\n */\nexport default class HardwareManager {\n  /**\n   * Set the hardware config. This is stored as 'hardware.json' on the\n   * robot file-system.\n   *\n   * @protected\n   * @param {object} value - the hardware.json object\n   */\n  static set config (value) {\n    _config = value\n  }\n\n  /**\n   * Validate the hardware configuration. Returns an array of any errors.\n   * This method makes sure the robot only defines logical devices that are\n   * configured in the hardware.\n   *\n   * @protected\n   * @return {array} - any errors in configuration, or null if no errors\n   */\n  static validateConfig () {\n    // error collection //\n    const errors = [ ]\n    const addError = (message) => errors.push({ type: 'HARDWARE', message })\n\n    // configuration must be set //\n    if (!_config) {\n      addError('Hardware configuration not set')\n    } else if (!_config.devices) {\n      addError('Hardware configuration is missing devices')\n    }\n    if (errors.length) return errors\n\n    // validate all logical devices are configured //\n    for (const deviceName in HardwareManager.devices) {\n      const device = HardwareManager.devices[deviceName]\n      const config = HardwareManager.config.devices[deviceName]\n      if (config) {\n        // make sure the driver is known //\n        const driverName = config.driver\n        if (!device.supportsDriver(driverName)) {\n          errors.push(`Device ${deviceName} has invalid driver: ${driverName}`)\n        }\n      } else {\n        // logical device name has no configuration onboard robot //\n        addError(`Device has no configuration: ${deviceName}`)\n      }\n    }\n\n    return (errors.length) ? errors : null\n  }\n\n  /**\n   * Get the outputs of all hardware devices by device name. This\n   * method is called by the framework to build the data packet to\n   * be sent to the robot.\n   *\n   * @protected\n   * @return {Map<string,number>} - values for all output devices by device name\n   */\n  static getOutputs () {\n    const packet = { }\n    // get device outputs //\n    for (const deviceName in _devices) {\n      const device = _devices[deviceName]\n      if (device.getOutput) {\n        packet[deviceName] = device.getOutput()\n      }\n    }\n    return packet\n  }\n\n  /**\n   * Set the values of named input devices. This method is called\n   * by the framework with raw values received from the robot.\n   *\n   * @protected\n   * @param {object} values - values of all input devices\n   */\n  static setInputs (values) {\n    // write inputs to devices //\n    for (const deviceName in values) {\n      const device = _devices[deviceName]\n      if (device && device.setInput) {\n        device.setInput(values[deviceName])\n      }\n    }\n  }\n\n  /**\n   * Called by the Device class constructor to register a device\n   * with the HardwareManager.\n   *\n   * @private\n   * @param {string} device - device name\n   * @throws {Error} device with that name already exists\n   */\n  static registerDevice (device) {\n    const name = device.name\n    if (_devices[name]) {\n      throw new Error(`Device already exists: ${name}`)\n    }\n    _devices[name] = device\n  }\n}\n",
    "static": true,
    "longname": "lib/hardware/HardwareManager.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 185,
    "kind": "variable",
    "name": "_devices",
    "memberof": "lib/hardware/HardwareManager.js",
    "static": true,
    "longname": "lib/hardware/HardwareManager.js~_devices",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client/lib/hardware/HardwareManager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "variable",
    "name": "_config",
    "memberof": "lib/hardware/HardwareManager.js",
    "static": true,
    "longname": "lib/hardware/HardwareManager.js~_config",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client/lib/hardware/HardwareManager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "class",
    "name": "HardwareManager",
    "memberof": "lib/hardware/HardwareManager.js",
    "static": true,
    "longname": "lib/hardware/HardwareManager.js~HardwareManager",
    "access": "protected",
    "export": true,
    "importPath": "combatbot-bot-client/lib/hardware/HardwareManager.js",
    "importStyle": "HardwareManager",
    "description": "Manages the virtual hardware layer, allowing uses to send commands to\nthe robot or receive sensor values from the robot by manipulating hardware\ninterface objects.\n\nThe class is part of the core framework infrastructure and should not be\nneeded in your code under most circumstances.",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 188,
    "kind": "set",
    "name": "config",
    "memberof": "lib/hardware/HardwareManager.js~HardwareManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/hardware/HardwareManager.js~HardwareManager.config",
    "access": "protected",
    "description": "Set the hardware config. This is stored as 'hardware.json' on the\nrobot file-system.",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the hardware.json object"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "validateConfig",
    "memberof": "lib/hardware/HardwareManager.js~HardwareManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/hardware/HardwareManager.js~HardwareManager.validateConfig",
    "access": "protected",
    "description": "Validate the hardware configuration. Returns an array of any errors.\nThis method makes sure the robot only defines logical devices that are\nconfigured in the hardware.",
    "lineNumber": 35,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "any errors in configuration, or null if no errors"
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "getOutputs",
    "memberof": "lib/hardware/HardwareManager.js~HardwareManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/hardware/HardwareManager.js~HardwareManager.getOutputs",
    "access": "protected",
    "description": "Get the outputs of all hardware devices by device name. This\nmethod is called by the framework to build the data packet to\nbe sent to the robot.",
    "lineNumber": 75,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Map<string,number>"
      ],
      "spread": false,
      "description": "values for all output devices by device name"
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "setInputs",
    "memberof": "lib/hardware/HardwareManager.js~HardwareManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/hardware/HardwareManager.js~HardwareManager.setInputs",
    "access": "protected",
    "description": "Set the values of named input devices. This method is called\nby the framework with raw values received from the robot.",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "values of all input devices"
      }
    ]
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "registerDevice",
    "memberof": "lib/hardware/HardwareManager.js~HardwareManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/hardware/HardwareManager.js~HardwareManager.registerDevice",
    "access": "private",
    "description": "Called by the Device class constructor to register a device\nwith the HardwareManager.",
    "lineNumber": 112,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "device",
        "description": "device name"
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "device with that name already exists"
      }
    ]
  },
  {
    "__docId__": 193,
    "kind": "file",
    "name": "lib/hardware/Motor.js",
    "content": "import Device from './Device'\nimport { constrain } from '../utils'\n\n/**\n * Controls a motor, which is presumed to support both forward\n * reverse movement with values of -1.0 to 1.0.\n */\nexport default class Motor extends Device {\n  /**\n   * Constructor\n   *\n   * @param {string} name - name of the motor\n   */\n  constructor (name) {\n    super(name)\n    /**\n     * Is the motor direction reversed.\n     *\n     * Defaults to `false`.\n     * @type {boolean}\n     */\n    this.reversed = false\n    this.set(0)\n  }\n\n  /**\n   * Set the value of the motor. This is constrained betweem -1.0 (full reverse)\n   * and 1.0 (full forward). A value of 0 is stopped.\n   *\n   * @param {number} [value=0] - the motor power value [-1.0, 1.0]\n   */\n  set (value = 0) {\n    super.set(constrain(this.inverted ? -value : value, -1.0, 1.0))\n  }\n\n  /**\n   * Returns the motor output. This will be an integer between -1023 and\n   * 1023, converted to a string.\n   *\n   * @override\n   * @protected\n   * @return {string} the motor value [-1023, 1023]\n   */\n  getOutput () {\n    return Math.round(this.get() * 1023).toString()\n  }\n\n  /**\n   * Does the Motor support a specified driver.\n   *\n   * Motors currently support the following drivers for motor-like devices:\n   *\n   *  - PWM_HBRIDGE : reversible power driver (speed and direction outputs)\n   *  - PWM : brushless ESC\n   *  - PWM : single direction power driver\n   *  - PWM : continuous rotation servo\n   *\n   * @private\n   * @param {string} driverName - name of the proposed driver\n   * @return {boolean} true if the Motor supports the specified driver.\n   **/\n  supportsDriver (driverName) {\n    return [ 'PWM_HBRIDGE', 'PWM' ].indexOf(driverName) !== -1\n  }\n}\n",
    "static": true,
    "longname": "lib/hardware/Motor.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 194,
    "kind": "class",
    "name": "Motor",
    "memberof": "lib/hardware/Motor.js",
    "static": true,
    "longname": "lib/hardware/Motor.js~Motor",
    "access": null,
    "export": true,
    "importPath": "combatbot-bot-client/lib/hardware/Motor.js",
    "importStyle": "Motor",
    "description": "Controls a motor, which is presumed to support both forward\nreverse movement with values of -1.0 to 1.0.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "lib/hardware/Device.js~Device"
    ]
  },
  {
    "__docId__": 195,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/hardware/Motor.js~Motor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/hardware/Motor.js~Motor#constructor",
    "access": null,
    "description": "Constructor",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the motor"
      }
    ]
  },
  {
    "__docId__": 196,
    "kind": "member",
    "name": "reversed",
    "memberof": "lib/hardware/Motor.js~Motor",
    "static": false,
    "longname": "lib/hardware/Motor.js~Motor#reversed",
    "access": null,
    "description": "Is the motor direction reversed.\n\nDefaults to `false`.",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "set",
    "memberof": "lib/hardware/Motor.js~Motor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/hardware/Motor.js~Motor#set",
    "access": null,
    "description": "Set the value of the motor. This is constrained betweem -1.0 (full reverse)\nand 1.0 (full forward). A value of 0 is stopped.",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "value",
        "description": "the motor power value [-1.0, 1.0]"
      }
    ]
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "getOutput",
    "memberof": "lib/hardware/Motor.js~Motor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/hardware/Motor.js~Motor#getOutput",
    "access": "protected",
    "description": "Returns the motor output. This will be an integer between -1023 and\n1023, converted to a string.",
    "lineNumber": 44,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the motor value [-1023, 1023]"
    },
    "override": true
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "supportsDriver",
    "memberof": "lib/hardware/Motor.js~Motor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/hardware/Motor.js~Motor#supportsDriver",
    "access": "private",
    "description": "Does the Motor support a specified driver.\n\nMotors currently support the following drivers for motor-like devices:\n\n - PWM_HBRIDGE : reversible power driver (speed and direction outputs)\n - PWM : brushless ESC\n - PWM : single direction power driver\n - PWM : continuous rotation servo",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "driverName",
        "description": "name of the proposed driver"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the Motor supports the specified driver."
    }
  },
  {
    "__docId__": 200,
    "kind": "file",
    "name": "lib/hardware/Servo.js",
    "content": "import Device from './Device'\nimport { map } from '../utils'\n\n/**\n * Controls a servo via a PWM output. Input values are 0.0 to 1.0,\n * representing the minimum and maximum rotational positions.\n */\nexport default class Servo extends Device {\n  /**\n   * Constructor.\n   *\n   * @param {string} name - name of the Servo\n   */\n  constructor (name) {\n    super(name)\n    /**\n     * The minimum value of the servo output, on a normalized scale of [0, 1.0].\n     *\n     * To limit the Servo minimum position to a value of 25% of full scale, set\n     * minOutput to 0.25.\n     *\n     * @type {number}\n     */\n    this.minOutput = 0.0\n    /**\n     * The maximum value of the servo output, on a normalized scale of [0, 1.0].\n     *\n     * To limit the Servo maximum position to a value of 75% of full scale, set\n     * minOutput to 0.75.\n     *\n     * @type {number}\n     */\n    this.maxOutput = 1.0\n    /**\n     * Should the servo direction be swapped.\n     *\n     * If true, an input of 0 will correspond to 100% full scale, while an input of\n     * 1.0 will correspond to 0% of full scale.\n     *\n     * @type {boolean}\n     */\n    this.reversed = false\n    this.set(0.5)\n  }\n\n  /**\n   * Set the value of the Servo on the configured scale between minOutput and\n   * maxOutput. Value of 0 corresponds to minOutput and 1.0 corresponds to maxOutput.\n   * If `reversed` is set, the values with be swapped.\n   *\n   * @param {number} [value=0] - the servo position [0, 1.0]\n   */\n  set (value = 0) {\n    if (this.reversed) {\n      super.set(map(value, 0.0, 1.0, this.minOutput, this.maxOutput))\n    } else {\n      super.set(map(value, 0.0, 1.0, this.maxOutput, this.minOutput))\n    }\n  }\n\n  /**\n   * Returns the Servo output. This will be an integer between 0 and 1023,\n   * converted to a string.\n   *\n   * @override\n   * @protected\n   * @return {string} the motor value [0, 1023]\n   */\n  getOutput () {\n    return Math.round(this.get() * 1023).toString()\n  }\n\n  /**\n   * Does the Servo support a specified driver.\n   *\n   * Servos currently support the following drivers:\n   *\n   *  - PWM : standard driver\n   *\n   * @private\n   * @param {string} driverName - name of the proposed driver\n   * @return {boolean} true if the Servo supports the specified driver.\n   **/\n  supportsDriver (driverName) {\n    return [ 'PWM' ].indexOf(driverName) !== -1\n  }\n}\n",
    "static": true,
    "longname": "lib/hardware/Servo.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 201,
    "kind": "class",
    "name": "Servo",
    "memberof": "lib/hardware/Servo.js",
    "static": true,
    "longname": "lib/hardware/Servo.js~Servo",
    "access": null,
    "export": true,
    "importPath": "combatbot-bot-client/lib/hardware/Servo.js",
    "importStyle": "Servo",
    "description": "Controls a servo via a PWM output. Input values are 0.0 to 1.0,\nrepresenting the minimum and maximum rotational positions.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "lib/hardware/Device.js~Device"
    ]
  },
  {
    "__docId__": 202,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/hardware/Servo.js~Servo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/hardware/Servo.js~Servo#constructor",
    "access": null,
    "description": "Constructor.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the Servo"
      }
    ]
  },
  {
    "__docId__": 203,
    "kind": "member",
    "name": "minOutput",
    "memberof": "lib/hardware/Servo.js~Servo",
    "static": false,
    "longname": "lib/hardware/Servo.js~Servo#minOutput",
    "access": null,
    "description": "The minimum value of the servo output, on a normalized scale of [0, 1.0].\n\nTo limit the Servo minimum position to a value of 25% of full scale, set\nminOutput to 0.25.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 204,
    "kind": "member",
    "name": "maxOutput",
    "memberof": "lib/hardware/Servo.js~Servo",
    "static": false,
    "longname": "lib/hardware/Servo.js~Servo#maxOutput",
    "access": null,
    "description": "The maximum value of the servo output, on a normalized scale of [0, 1.0].\n\nTo limit the Servo maximum position to a value of 75% of full scale, set\nminOutput to 0.75.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 205,
    "kind": "member",
    "name": "reversed",
    "memberof": "lib/hardware/Servo.js~Servo",
    "static": false,
    "longname": "lib/hardware/Servo.js~Servo#reversed",
    "access": null,
    "description": "Should the servo direction be swapped.\n\nIf true, an input of 0 will correspond to 100% full scale, while an input of\n1.0 will correspond to 0% of full scale.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "set",
    "memberof": "lib/hardware/Servo.js~Servo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/hardware/Servo.js~Servo#set",
    "access": null,
    "description": "Set the value of the Servo on the configured scale between minOutput and\nmaxOutput. Value of 0 corresponds to minOutput and 1.0 corresponds to maxOutput.\nIf `reversed` is set, the values with be swapped.",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "value",
        "description": "the servo position [0, 1.0]"
      }
    ]
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "getOutput",
    "memberof": "lib/hardware/Servo.js~Servo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/hardware/Servo.js~Servo#getOutput",
    "access": "protected",
    "description": "Returns the Servo output. This will be an integer between 0 and 1023,\nconverted to a string.",
    "lineNumber": 69,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the motor value [0, 1023]"
    },
    "override": true
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "supportsDriver",
    "memberof": "lib/hardware/Servo.js~Servo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/hardware/Servo.js~Servo#supportsDriver",
    "access": "private",
    "description": "Does the Servo support a specified driver.\n\nServos currently support the following drivers:\n\n - PWM : standard driver",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "driverName",
        "description": "name of the proposed driver"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the Servo supports the specified driver."
    }
  },
  {
    "__docId__": 209,
    "kind": "file",
    "name": "lib/hardware/index.js",
    "content": "// re-export the individual modules //\nexport { default as HardwareManager } from './HardwareManager'\nexport { default as Device } from './Device'\nexport { default as Motor } from './Motor'\nexport { default as Servo } from './Servo'\nexport { default as DigitalOutput } from './DigitalOutput'\nexport { default as DigitalInput } from './DigitalInput'\n",
    "static": true,
    "longname": "lib/hardware/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 210,
    "kind": "file",
    "name": "lib/index.js",
    "content": "/* eslint-disable no-unused-vars */\nimport { HardwareManager, Motor, Servo, DigitalOutput, DigitalInput } from './hardware'\nimport { TankDrive, ArcadeDrive } from './drive'\nimport { Joystick, Button, Slider, ControlManager } from './controls'\nimport { AjaxConnection, WebSocketConnection, Connection } from './connection'\nimport { ajaxGet } from './utils'\n\n// get HTML elements //\nconst heading = document.getElementById('heading')\nconst statusIcon = document.getElementById('status-box')\nconst statusText = document.getElementById('status-text')\nconst infoBox = document.getElementById('info-box')\nconst errorBox = document.getElementById('error-box')\nconst canvas = document.getElementById('touch-canvas')\n\n// configure the ControlManager HTML5 canvas //\nconst resizeCanvas = () => {\n  canvas.width = window.innerWidth\n  canvas.height = window.innerHeight - heading.clientHeight - 1\n\n  window.scrollTo(0, 0)\n}\nwindow.addEventListener('orientationchange', resizeCanvas)\nwindow.addEventListener('resize', resizeCanvas)\nresizeCanvas()\nControlManager.setCanvas(canvas)\n\n// add an error to error box //\nfunction addError ({ type, message }) {\n  const eline = document.createElement('li')\n  eline.className = type\n  // error type //\n  const tspan = document.createElement('span')\n  tspan.className = 'type'\n  tspan.innerText = type\n  eline.appendChild(tspan)\n  // error message //\n  const mspan = document.createElement('span')\n  mspan.className = 'message'\n  mspan.innerText = message\n  eline.appendChild(mspan)\n  errorBox.appendChild(eline)\n}\n\nfunction clearErrors (type) {\n  const els = type\n    ? errorBox.getElementsByClassName(type)\n    : errorBox.getElementByTagName('ul')\n  for (let i = 0; i < els.length; i++) {\n    els[i].remove()\n  }\n}\n\n// set UI connection state //\nfunction setConnectionState (state) {\n  console.log('Connection state:', state)\n  switch (state) {\n    case Connection.DISCONNECTED:\n    case Connection.CONNECTING:\n      statusIcon.style.backgroundColor = 'yellow'\n      break\n    case Connection.CONNECTED:\n      statusIcon.style.backgroundColor = 'green'\n      break\n    default:\n      statusIcon.style.backgroundColor = 'red'\n      break\n  }\n  statusText.innerText = state\n}\n\nfunction setConnectionInfo (conn) {\n  infoBox.innerText = `Ping: ${\n    (conn.pingTimeMs !== null) ? `${conn.pingTimeMs} ms` : '----'\n  }`\n}\n\n// initialize the application //\nconst getHardwareConfig = new Promise((resolve, reject) =>\n  ajaxGet('./hardware.json', (err, resp) => {\n    if (err) return reject(err)\n    resolve(JSON.parse(resp.data))\n  })\n)\nconst waitForLoad = new Promise((resolve, reject) => {\n  window.addEventListener('load', () => {\n    console.log('Page loaded')\n    resolve()\n  })\n})\n\nconst WEBSOCKET = true\nlet _runLoop = true\nlet _connection = null\nPromise.all([ getHardwareConfig, waitForLoad ])\n  .then(([ config ]) => {\n    // set hardware configuration //\n    HardwareManager.config = config\n\n    if (window.setup) {\n      console.log('Running robot setup...')\n      try {\n        window.setup()\n      } catch (error) {\n        addError({ type: 'SETUP', message: error.message })\n      }\n    }\n    // test hardware config //\n    const hwErrors = HardwareManager.validateConfig()\n    if (hwErrors) {\n      for (let i = 0; i < hwErrors.length; i++) {\n        addError(hwErrors[i])\n      }\n    }\n\n    // establish connection //\n    _connection = WEBSOCKET ? new WebSocketConnection() : new AjaxConnection()\n    _connection.onstatechange = (newState, oldState) => {\n      setConnectionState(newState)\n      if (newState === Connection.ERROR) {\n        console.log(_connection.lastError)\n        addError({ type: 'CONNECTION', message: _connection.lastError.message })\n      } else if (oldState === Connection.ERROR) {\n        clearErrors('CONNECTION')\n      }\n    }\n    _connection.onresponsedata = (data) => {\n      HardwareManager.setInputs(data)\n      setConnectionInfo(_connection)\n    }\n    // initialize UI //\n    setConnectionState(_connection.state)\n    // initialize control data //\n    _connection.setRobotData(getPacket(HardwareManager.getOutputs()))\n    _connection.start()\n\n    // start the UI control loop //\n    ControlManager.start()\n    ControlManager.onupdate = () => {\n      if (!_runLoop) return\n\n      // call the loop() method to update virtual hardware //\n      if (window.loop) {\n        try {\n          window.loop()\n        } catch (error) {\n          addError({ type: 'LOOP', message: error.message })\n        }\n      }\n      const request = getPacket(HardwareManager.getOutputs())\n      // console.log('request', request)\n      _connection.setRobotData(request)\n    }\n  })\n  .catch(err => {\n    addError({ type: 'SCRIPT', message: err.message })\n  })\n\n// FIXME: get the ghetto-packet for legacy firmware //\nfunction getPacket (json) {\n  return `${json.leftMotor}:${json.rightMotor}:${json.weaponMotor}`\n}\n",
    "static": true,
    "longname": "lib/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 211,
    "kind": "variable",
    "name": "heading",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~heading",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "variable",
    "name": "statusIcon",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~statusIcon",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "variable",
    "name": "statusText",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~statusText",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "variable",
    "name": "infoBox",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~infoBox",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "variable",
    "name": "errorBox",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~errorBox",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "variable",
    "name": "canvas",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~canvas",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "function",
    "name": "resizeCanvas",
    "memberof": "lib/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/index.js~resizeCanvas",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 218,
    "kind": "function",
    "name": "addError",
    "memberof": "lib/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/index.js~addError",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"type\": *, \"message\": *}"
        ],
        "defaultRaw": {
          "type": null,
          "message": null
        },
        "defaultValue": "{\"type\":null,\"message\":null}"
      }
    ]
  },
  {
    "__docId__": 219,
    "kind": "function",
    "name": "clearErrors",
    "memberof": "lib/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/index.js~clearErrors",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client",
    "importStyle": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 220,
    "kind": "function",
    "name": "setConnectionState",
    "memberof": "lib/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/index.js~setConnectionState",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client",
    "importStyle": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 221,
    "kind": "function",
    "name": "setConnectionInfo",
    "memberof": "lib/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/index.js~setConnectionInfo",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client",
    "importStyle": null,
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "conn",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 222,
    "kind": "variable",
    "name": "getHardwareConfig",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~getHardwareConfig",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client",
    "importStyle": null,
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "Promise"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "variable",
    "name": "waitForLoad",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~waitForLoad",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client",
    "importStyle": null,
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "Promise"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "variable",
    "name": "WEBSOCKET",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~WEBSOCKET",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client",
    "importStyle": null,
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "variable",
    "name": "_runLoop",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~_runLoop",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client",
    "importStyle": null,
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "variable",
    "name": "_connection",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~_connection",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client",
    "importStyle": null,
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "function",
    "name": "getPacket",
    "memberof": "lib/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/index.js~getPacket",
    "access": null,
    "export": false,
    "importPath": "combatbot-bot-client",
    "importStyle": null,
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 228,
    "kind": "file",
    "name": "lib/utils.js",
    "content": "/**\n * Utility functions\n *\n * @module utils\n */\n/* globals XMLHttpRequest */\n\n/**\n * Constrain input to a given range.\n *\n * Identical to the Arduino library function with the same name.\n * @see https://www.arduino.cc/en/Reference/Constrain\n *\n * @param {number} value - input value\n * @param {number} min - minimum value\n * @param {number} max - maximum value\n * @return {number}\n */\nexport function constrain (value, min, max) {\n  if (value < min) return min\n  if (value > max) return max\n  return value\n}\n\n/**\n * Map a value from an input range to an output range.\n *\n * Identical to the Arduino library function with the same name.\n * @see https://www.arduino.cc/en/Reference/Map\n *\n * @param {number} value input value\n * @param {number} inputMin input range low value\n * @param {number} inputMax input range high value\n * @param {number} outputMin output range low value\n * @param {number} outputMax output range high value\n * @return {number}\n */\nexport function map (value, inputMin, inputMax, outputMin, outputMax) {\n  return (value - inputMin) * (outputMax - outputMin) / (inputMax - inputMin) + outputMin\n}\n\n/**\n * General AJAX call.\n * @private\n *\n * @param {string} method HTTP method\n * @param {string} url url to call\n * @param {?string|Object} data data to send, will be stringified to JSON if object\n * @param {?number} timeout timeout in milliseconds\n * @param {Function} callback (err, data)\n */\nexport function ajax (method, url, data, timeout, callback) {\n  if (typeof timeout === 'function') {\n    callback = timeout\n    timeout = undefined\n  }\n\n  // get the response //\n  const getResponse = (xhr, data) => ({\n    status: xhr.status,\n    statusText: xhr.statusText,\n    data,\n    xhr\n  })\n\n  // create request //\n  const xhr = new XMLHttpRequest()\n  xhr.open(method, url, true)\n  xhr.timeout = timeout\n  xhr.addEventListener('load', () => {\n    if (xhr.status >= 200 && xhr.status < 300) {\n      callback(null, getResponse(xhr, xhr.responseText))\n    } else {\n      callback(new Error(`${xhr.status} - ${xhr.statusText}`), getResponse(xhr))\n    }\n  })\n  xhr.addEventListener('error', (e) => callback(new Error('Request failed'), getResponse(xhr)))\n  xhr.addEventListener('timeout', () => callback(new Error('Request timeout'), getResponse(xhr)))\n\n  if (data) {\n    xhr.send(typeof data !== 'string' ? JSON.stringify(data) : data)\n  } else {\n    xhr.send()\n  }\n}\n\n/**\n * XHR wrapper to simplify AJAX GET calls.\n * @private\n *\n * @param {string} url url to call\n * @param {?number} timeoutMs connection timeout in milliseconds\n * @param {Function} callback - (err, data)\n */\nexport function ajaxGet (url, timeoutMs, callback) {\n  return ajax('GET', url, null, timeoutMs, callback)\n}\n\n/**\n * XHR wrapper to simplify AJAX PUT calls.\n * @private\n *\n * @param {string} url url to call\n * @param {?string|Object} data data to send, will be stringified to JSON if object\n * @param {?number} timeout timeout in milliseconds\n * @param {Function} callback (err, data)\n */\nexport function ajaxPut (url, data, timeout, callback) {\n  return ajax('PUT', url, data, timeout, callback)\n}\n",
    "static": true,
    "longname": "lib/utils.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 229,
    "kind": "function",
    "name": "constrain",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~constrain",
    "access": null,
    "export": true,
    "importPath": "combatbot-bot-client/lib/utils.js",
    "importStyle": "{constrain}",
    "description": "Constrain input to a given range.\n\nIdentical to the Arduino library function with the same name.",
    "see": [
      "https://www.arduino.cc/en/Reference/Constrain"
    ],
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "input value"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": "minimum value"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "maximum value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 230,
    "kind": "function",
    "name": "map",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~map",
    "access": null,
    "export": true,
    "importPath": "combatbot-bot-client/lib/utils.js",
    "importStyle": "{map}",
    "description": "Map a value from an input range to an output range.\n\nIdentical to the Arduino library function with the same name.",
    "see": [
      "https://www.arduino.cc/en/Reference/Map"
    ],
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "input value"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "inputMin",
        "description": "input range low value"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "inputMax",
        "description": "input range high value"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "outputMin",
        "description": "output range low value"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "outputMax",
        "description": "output range high value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 231,
    "kind": "function",
    "name": "ajax",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~ajax",
    "access": "private",
    "export": true,
    "importPath": "combatbot-bot-client/lib/utils.js",
    "importStyle": "{ajax}",
    "description": "General AJAX call.",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "HTTP method"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "url to call"
      },
      {
        "nullable": true,
        "types": [
          "string",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "data to send, will be stringified to JSON if object"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "timeout",
        "description": "timeout in milliseconds"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "(err, data)"
      }
    ]
  },
  {
    "__docId__": 232,
    "kind": "function",
    "name": "ajaxGet",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~ajaxGet",
    "access": "private",
    "export": true,
    "importPath": "combatbot-bot-client/lib/utils.js",
    "importStyle": "{ajaxGet}",
    "description": "XHR wrapper to simplify AJAX GET calls.",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "url to call"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "timeoutMs",
        "description": "connection timeout in milliseconds"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "(err, data)"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "function",
    "name": "ajaxPut",
    "memberof": "lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/utils.js~ajaxPut",
    "access": "private",
    "export": true,
    "importPath": "combatbot-bot-client/lib/utils.js",
    "importStyle": "{ajaxPut}",
    "description": "XHR wrapper to simplify AJAX PUT calls.",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "url to call"
      },
      {
        "nullable": true,
        "types": [
          "string",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "data to send, will be stringified to JSON if object"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "timeout",
        "description": "timeout in milliseconds"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "(err, data)"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 236,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 237,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 238,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 239,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 240,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 241,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 242,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 243,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 244,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 245,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 246,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 247,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 248,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 249,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 250,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 251,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 252,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 253,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 254,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 255,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 256,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 257,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 258,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 259,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 260,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 261,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 262,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 263,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 264,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 265,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 266,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 267,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 268,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 269,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 270,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 271,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 272,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 273,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 274,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 275,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 276,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 277,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 278,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 279,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 280,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 281,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "lineNumber": 193,
    "builtinExternal": true
  },
  {
    "__docId__": 283,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 284,
    "kind": "external",
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 285,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 286,
    "kind": "external",
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 287,
    "kind": "external",
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 288,
    "kind": "external",
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 289,
    "kind": "external",
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 290,
    "kind": "external",
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "lineNumber": 34,
    "builtinExternal": true
  }
]